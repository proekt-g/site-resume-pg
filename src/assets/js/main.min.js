"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/*!
 * fullPage 3.0.9
 * https://github.com/alvarotrigo/fullPage.js
 *
 * @license GPLv3 for open source use only
 * or Fullpage Commercial License for commercial use
 * http://alvarotrigo.com/fullPage/pricing/
 *
 * Copyright (C) 2018 http://alvarotrigo.com/fullPage - A project by Alvaro Trigo
 */function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _createForOfIteratorHelper(e,t){var a;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(a=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){a&&(e=a);var n=0,i=function(){};return{s:i,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,s=!0,o=!1;return{s:function(){a=e[Symbol.iterator]()},n:function(){var e=a.next();return s=e.done,e},e:function(e){o=!0,r=e},f:function(){try{s||null==a.return||a.return()}finally{if(o)throw r}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}!function(e,t){"object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).TypeIt=t()}(void 0,(function(){function e(t){return(e="function"==typeof Symbol&&"symbol"==_typeof(Symbol.iterator)?function(e){return _typeof(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof(e)})(t)}var t={strings:[],speed:100,cursor:!0,cursorChar:"|",cursorSpeed:1e3,deleteSpeed:null,lifeLike:!0,breakLines:!0,startDelay:250,startDelete:!1,nextStringDelay:750,loop:!1,loopDelay:750,html:!0,waitUntilVisible:!1,beforeString:function(){},afterString:function(){},beforeStep:function(){},afterStep:function(){},afterComplete:function(){}},a=function(e){return e.map((function(e){return void 0===e[1]&&e.push(null),void 0===e[2]&&e.push({}),e}))},n=function(e,t){return Object.assign({},e,t)},i=function(e){return Array.isArray(e)},r=function(e,t){return e[2]=n(e[2],t)||t,e},s=function(e,t){return i(e[0])?e.map((function(e){return r(e,t)})):r(e,t)},o=function(e,t,a,n){n=n||!1,a=a||{};var r=!i(e),o=e.length;return(e=r?new Array(e).fill(0):e).map((function(e,i){if(r)return t;var l=[t,e,a];return n&&(0===i&&(l=s(l,{isFirst:!0})),i+1===o&&(l=s(l,{isLast:!0}))),l}))};function l(e){this.insert=function(e,a){t.splice(e,0,a)},this.add=function(e,s,l){return e=i(e)?e:[e,null],l=l||!1,s=s||1,i(e[0])||(e=o(s,e)),e=a(e).map((function(e){return e[2]=n(e[2],{id:r}),r++,e})),t=l?e.concat(t):t.concat(e),this},this.set=function(e,a){t[e]=a},this.reset=function(){t=t.map((function(e){return e[2].executed=!1,e}))},this.getItems=function(){return(t=a(t)).filter((function(e){return!e[2].executed}))},this.setMeta=function(e,a){var i=t.findIndex((function(t){return t[2].id===e}));t[i][2]=n(t[i][2],a)};var t=[],r=0;this.add(e)}var d=function(e){return Array.from(e)},c=function(e){var t=[];return t.concat.apply(t,e)},u=function(e){var t=document.implementation.createHTMLDocument("");return t.body.innerHTML=e,t.body},p=function e(t,a,n){a=a||null,n=void 0!==n&&n;var i=d(t.childNodes).map((function(t){return 3===(a=t).nodeType||"BR"===a.tagName?t:e(t);var a}));return i=c(i),a&&(i=i.filter((function(e){return!a.contains(e)}))),n?i.reverse():i},f=function(e){return"BODY"===e.tagName},h=function(e,t){t=t||null;var a=e instanceof HTMLElement;return{node:t,isTopLevelText:(!t||f(t.parentNode))&&!a,isHTMLElement:a,content:e}};function v(e){var t,a=u(e);return t=p(a).map((function(e){return e.nodeValue?d(e.nodeValue).map((function(t){return h(t,e)})):h(e)})),c(t)}function m(e,t){return(t=void 0===t||t)?v(e):d(e).map((function(e){return h(e)}))}var g=function(e){return document.createElement(e)},y=function(e,t){var a=g("style");a.id=t||"",a.appendChild(document.createTextNode(e)),document.head.appendChild(a)},b=function(e){return i(e)||(e=[e/2,e/2]),{before:e[0],after:e[1],total:e[0]+e[1]}},w=function(e,t){return Math.abs(Math.random()*(e+t-(e-t))+(e-t))},E=function(e){return["textarea","input"].indexOf(e.tagName.toLowerCase())>-1},S=function(e,t){var a=t.querySelectorAll("*");return[t].concat(d(a).reverse()).find((function(t){return t.cloneNode().outerHTML===e.outerHTML}))},x=function(e,t,a,n){a=a||null;var i=t.isHTMLElement,r=i?t.content:document.createTextNode(t.content);if(E(e))e.value="".concat(e.value).concat(t.content);else{if(!t.isTopLevelText&&!i){var s=t.node.parentNode,o=S(s.cloneNode(),e);if(function(e,t){if(!e)return!1;var a=e.nextSibling;return!a||a.isEqualNode(t)}(o,a))e=o;else if((r=s.cloneNode()).innerText=t.content,!f(s.parentNode)){for(var l=s.parentNode,d=l.cloneNode(),c=S(d,e);!c&&!f(l);)d.innerHTML=r.outerHTML,r=d,d=l.parentNode.cloneNode(),l=l.parentNode,c=S(d,e);e=c||e}}var u=p(e,a,!0)[n-1],h=u?u.parentNode:e;h.insertBefore(r,h.contains(a)?a:null)}},T=function(e){var t;return null==e||null===(t=e.parentNode)||void 0===t?void 0:t.removeChild(e)},C=function(e,t,a){var n,i="string"==typeof e,r=!1,s=-1*e;return i&&(s=(n="END"===e.toUpperCase())?-1:1,r=n?t+s>0:t+s<a.length),{isString:i,numberOfSteps:s,canKeepMoving:r}};function M(e,t,a){return a?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function L(e){return function(){for(var t=[],a=0;a<arguments.length;a++)t[a]=arguments[a];try{return Promise.resolve(e.apply(this,t))}catch(e){return Promise.reject(e)}}}function k(){}function z(e,t){if(!t)return e&&e.then?e.then(k):Promise.resolve()}function P(e,t){var a=e();return a&&a.then?a.then(t):t(a)}function A(e,t,a){if(!e.s){if(a instanceof I){if(!a.s)return void(a.o=A.bind(null,e,t));1&t&&(t=a.s),a=a.v}if(a&&a.then)return void a.then(A.bind(null,e,t),A.bind(null,e,2));e.s=t,e.v=a;var n=e.o;n&&n(e)}}var I=function(){function e(){}return e.prototype.then=function(t,a){var n=new e,i=this.s;if(i){var r=1&i?t:a;if(r){try{A(n,1,r(this.v))}catch(e){A(n,2,e)}return n}return this}return this.o=function(e){try{var i=e.v;1&e.s?A(n,1,t?t(i):i):a?A(n,1,a(i)):A(n,2,i)}catch(e){A(n,2,e)}},n},e}();function O(e,t){return e&&e.then?e.then(t):t(e)}return function(a,r){var s=this,c=this;r=r||{};var f=function(e,t,a){return e=i(e[0])?e:[e],se.add(e,t),function(e){var t=(e=e||{}).delay;t&&se.add([R,t])}(a),c},S=function(t){return t="object"===e(t)?t:{},[[X,t,{force:!0}],[X,te,{force:!0}]]},$=function(){return U?d(W.value):p(W,oe,!0)},D=function(e,t){t=t||1;var a=te.nextStringDelay;se.insert(e,[R,a.before]),se.insert(e+t+1,[R,a.after])},N=L((function(){if(oe){var e="[data-typeit-id='".concat(re,"'] .ti-cursor");y("@keyframes blink-".concat(re," { 0% {opacity: 0} 49% {opacity: 0} 50% {opacity: 1} } ").concat(e," { animation: blink-").concat(re," ").concat(te.cursorSpeed/1e3,"s infinite; } ").concat(e,".with-delay { animation-delay: 500ms; } ").concat(e,".disabled { animation: none; }"),re),W.appendChild(oe);var t="loaded"===document.fonts.status;return M(t||document.fonts.ready,(function(e){var t=oe.getBoundingClientRect().width/2;oe.style.margin="0 -".concat(t+2,"px 0 -").concat(t-2,"px")}),t)}})),H=function(e){oe&&(oe.classList.toggle("disabled",e),oe.classList.toggle("with-delay",!e))},B=L((function(e,t){return Q.push(setTimeout(e,t)),M()})),_=L((function(e){var t=Z;return M(t&&V(Z),(function(t){return se.reset(),se.set(0,[R,e.before]),z(q(!0))}),!t)})),G=L((function(){ee.started=!0;var e,t=se.getItems();return O(function(e,t){try{var a=e()}catch(e){return t(e)}return a&&a.then?a.then(void 0,t):a}((function(){return O(function(e,t,a){var n,i,r=-1;return function a(s){try{for(;++r<e.length;)if((s=t(r))&&s.then){if(!((o=s)instanceof I&&1&o.s))return void s.then(a,i||(i=A.bind(null,n=new I,2)));s=s.v}n?A(n,1,s):n=s}catch(e){A(n||(n=new I),2,e)}var o}(),n}(t,(function(a){if(ee.frozen||ee.destroyed)throw"";var n,i,r,o,l=t[a],d=l[2];return e=[l,s],d.freezeCursor&&H(!0),n=te.speed,i=te.deleteSpeed,r=te.lifeLike,o=(i=null!==i?i:n/3)/2,K=r?[w(n,n/2),w(i,o)]:[n,i],P((function(){var t;if(null==d?void 0:d.isFirst)return z((t=te).beforeString.apply(t,e))}),(function(){var t;return M((t=te).beforeStep.apply(t,e),(function(){return M(l[0].call(s,l[1],d),(function(){return P((function(){var t,a;if(null===(t=l[2])||void 0===t?void 0:t.isLast)return z((a=te).afterString.apply(a,e))}),(function(){var t;return M((t=te).afterStep.apply(t,e),(function(){se.setMeta(d.id,{executed:!0}),H(!1)}))}))}))}))}))})),(function(t){var a;return ee.completed=!0,M((a=te).afterComplete.apply(a,e),(function(){if(!te.loop)throw"";var e=te.loopDelay;B((function(){return M(_(e),(function(){G()}))}),e.after)}))}))}),k),(function(e){return s}))})),R=function(e){return new Promise((function(t){B((function(){return t()}),e||0)}))},V=function e(t){var a=$(),n=C(t,Z,a);return Z+=n.numberOfSteps,new Promise((function(t){B(L((function(){return function(e,t,a,n){if(a){var i=n,r=t[(i=i>t.length?t.length:i)-1];(e=r?r.parentNode:e).insertBefore(a,r||null)}}(W,$(),oe,Z),P((function(){if(n.isString&&n.canKeepMoving)return z(e(n.numberOfSteps>0?"START":"END"))}),(function(){return t()}))})),K[0])}))},Y=function(e){return new Promise((function(t){B((function(){return x(W,e,oe,Z),t()}),K[0])}))},X=L((function(e){te=n(te,e)})),F=L((function(){U?W.value="":$().forEach((function(e){T(e)}))})),q=function e(t){return t=!0===t,new Promise((function(a){B(L((function(){var n=!1,i=$();return i.length&&(U?W.value=W.value.slice(0,-1):T(i[Z])),d(W.querySelectorAll("*")).forEach((function(e){if(!e.innerHTML&&"BR"!==e.tagName){for(var t=e;1===t.parentNode.childNodes.length&&t.parentNode.childNodes[0].isEqualNode(t);)t=t.parentNode;T(t)}})),P((function(){if(t&&i.length-1>0)return M(e(!0),(function(){return n=!0,a()}))}),(function(e){return n?e:a()}))})),K[1])}))};this.break=function(e){return f([Y,h(g("BR"))],1,e)},this.delete=function(e,t){var a=S(t);return f([a[0]].concat([].concat(Array(Math.abs(e)||1)).fill().map((function(){return[q,!e,J]})),[a[1]]),1,t)},this.empty=function(){return f(F,1,arguments)},this.exec=function(e,t){var a=S(t);return f([a[0],[e,null],a[1]],1,t)},this.move=function(e,t){var a=C(e,Z,$()),n=S(t),i=a.isString?e:Math.sign(e);return f([n[0]].concat([].concat(Array(Math.abs(e)||1)).fill().map((function(){return[V,i,J]})),[n[1]]),1,t)},this.options=function(e){return f([X,e],1,e)},this.pause=function(e,t){return f([R,e],1,t)},this.type=function(e,t){var a=S(t),n=m(e,te.html),i=[a[0]].concat(o(n,Y,J,!0),[a[1]]);return f(i,1,t)},this.is=function(e){return ee[e]},this.destroy=function(e){e=void 0===e||e,Q.forEach((function(e){clearTimeout(e)})),Q=[],e&&T(oe),ee.destroyed=!0},this.freeze=function(){ee.frozen=!0},this.unfreeze=function(){ee.frozen=!1,G()},this.reset=function(){for(var e in!this.is("destroyed")&&this.destroy(),se.reset(),Z=0,ee)ee[e]=!1;return U?W.value="":W.innerHTML="",this},this.go=function(){return ee.started?this:(N(),te.waitUntilVisible?(function(e,t){new IntersectionObserver((function(a,n){a.forEach((function(a){a.isIntersecting&&(t(),n.unobserve(e))}))}),{threshold:1}).observe(e)}(W,G.bind(this)),this):(G(),this))},this.getQueue=function(){return se},this.getOptions=function(){return te},this.getElement=function(){return W};var j,W="string"==typeof(j=a)?document.querySelector(j):j,U=E(W),K=[],Q=[],Z=0,J={freezeCursor:!0},ee={started:!1,completed:!1,frozen:!1,destroyed:!1},te=n(t,r);te=n(te,{html:!U&&te.html,nextStringDelay:b(te.nextStringDelay),loopDelay:b(te.loopDelay)});var ae,ne,ie,re=Math.random().toString().substring(2,9),se=new l([R,te.startDelay]);W.setAttribute("data-typeit-id",re),y("[data-typeit-id]:before {content: '.'; display: inline-block; width: 0; visibility: hidden;}[data-typeit-id]"),te.strings=(ie=te.strings,ae=i(ie)?ie:[ie],(ne=function(e){return e.innerHTML.replace(/<\!--.*?-->/g,"").trim()}(W))?(W.innerHTML="",te.startDelete?(v(ne).forEach((function(e){x(W,e,oe,Z)})),se.add([q,!0]),D(1),ae):[ne.trim()].concat(ae)):ae);var oe=function(){if(U||!te.cursor)return null;var e=g("span");return e.innerHTML=u(te.cursorChar).innerHTML,e.className="ti-cursor",e.style.cssText="display:inline;".concat(function(e){var t,a=["font","lineHeight","color"],n=g("SPAN"),i=(t=e,window.getComputedStyle(t,null));for(var r in i)a.indexOf(r)>-1&&i[r]&&(n.style[r]=i[r]);return n.style.cssText}(W)),e}();te.strings.length&&function(){var e=te.strings.filter((function(e){return!!e}));e.forEach((function(t,a){var n=m(t,te.html);se.add(o(n,Y,J,!0));var i=se.getItems().length;if(a+1!==e.length){if(te.breakLines){var r=h(g("BR"));return se.add([Y,r,J]),void D(i)}se.add(o(n,q,J)),D(i,t.length)}}))}()}})),function(e,t,a,n,i){"function"==typeof define&&define.amd?define((function(){return e.fullpage=n(t,a),e.fullpage})):"object"==("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=n(t,a):t.fullpage=n(t,a)}(void 0,window,document,(function(e,t){var a="fullpage-wrapper",n="."+a,i="fp-responsive",r="fp-notransition",s="fp-destroyed",o="fp-enabled",l="fp-viewing",d="active",c="."+d,u="fp-completely",p="fp-section",f="."+p,h=f+c,v="fp-tableCell",m="."+v,g="#fp-nav",y="fp-slide",b="."+y,w=b+c,E="fp-slides",S="."+E,x="fp-slidesContainer",T="."+x,C="fp-table",M="fp-slidesNav",L="."+M,k=L+" a",z=".fp-controlArrow",P=z+".fp-prev",A=z+".fp-next";function I(t,a){e.console&&e.console[t]&&e.console[t]("fullPage: "+a)}function O(e,a){return(a=1<arguments.length?a:t)?a.querySelectorAll(e):null}function $(e){e=e||{};for(var t=1,a=arguments.length;t<a;++t){var n=arguments[t];if(n)for(var i in n)n.hasOwnProperty(i)&&("[object Object]"!==Object.prototype.toString.call(n[i])?e[i]=n[i]:e[i]=$(e[i],n[i]))}return e}function D(e,t){return null!=e&&(e.classList?e.classList.contains(t):new RegExp("(^| )"+t+"( |$)","gi").test(e.className))}function N(){return"innerHeight"in e?e.innerHeight:t.documentElement.offsetHeight}function H(){return e.innerWidth}function B(e,t){var a;for(a in e=q(e),t)if(t.hasOwnProperty(a)&&null!==a)for(var n=0;n<e.length;n++)e[n].style[a]=t[a];return e}function _(e,t,a){for(var n=e[a];n&&!pe(n,t);)n=n[a];return n}function G(e,t){return _(e,t,"previousElementSibling")}function R(e,t){return _(e,t,"nextElementSibling")}function V(e){return e.previousElementSibling}function Y(e){return e.nextElementSibling}function X(e){return e[e.length-1]}function F(e,t){e=U(e)?e[0]:e;for(var a=null!=t?O(t,e.parentNode):e.parentNode.childNodes,n=0,i=0;i<a.length;i++){if(a[i]==e)return n;1==a[i].nodeType&&n++}return-1}function q(e){return U(e)?e:[e]}function j(e){e=q(e);for(var t=0;t<e.length;t++)e[t].style.display="none";return e}function W(e){e=q(e);for(var t=0;t<e.length;t++)e[t].style.display="block";return e}function U(e){return"[object Array]"===Object.prototype.toString.call(e)||"[object NodeList]"===Object.prototype.toString.call(e)}function K(e,t){e=q(e);for(var a=0;a<e.length;a++){var n=e[a];n.classList?n.classList.add(t):n.className+=" "+t}return e}function Q(e,t){e=q(e);for(var a=t.split(" "),n=0;n<a.length;n++){t=a[n];for(var i=0;i<e.length;i++){var r=e[i];r.classList?r.classList.remove(t):r.className=r.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}}return e}function Z(e,t){t.appendChild(e)}function J(e,a,n){var i;a=a||t.createElement("div");for(var r=0;r<e.length;r++){var s=e[r];(n&&!r||!n)&&(i=a.cloneNode(!0),s.parentNode.insertBefore(i,s)),i.appendChild(s)}return e}function ee(e,t){J(e,t,!0)}function te(e,t){for("string"==typeof t&&(t=he(t)),e.appendChild(t);e.firstChild!==t;)t.appendChild(e.firstChild)}function ae(e){for(var a=t.createDocumentFragment();e.firstChild;)a.appendChild(e.firstChild);e.parentNode.replaceChild(a,e)}function ne(e,t){return e&&1===e.nodeType?pe(e,t)?e:ne(e.parentNode,t):null}function ie(e,t){se(e,e.nextSibling,t)}function re(e,t){se(e,e,t)}function se(e,t,a){U(a)||("string"==typeof a&&(a=he(a)),a=[a]);for(var n=0;n<a.length;n++)e.parentNode.insertBefore(a[n],t)}function oe(){var a=t.documentElement;return(e.pageYOffset||a.scrollTop)-(a.clientTop||0)}function le(e){return Array.prototype.filter.call(e.parentNode.children,(function(t){return t!==e}))}function de(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function ce(e){if("function"==typeof e)return!0;var t=Object.prototype.toString(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}function ue(a,n,i){var r;i=void 0===i?{}:i,"function"==typeof e.CustomEvent?r=new CustomEvent(n,{detail:i}):(r=t.createEvent("CustomEvent")).initCustomEvent(n,!0,!0,i),a.dispatchEvent(r)}function pe(e,t){return(e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector).call(e,t)}function fe(e,t){if("boolean"==typeof t)for(var a=0;a<e.length;a++)e[a].style.display=t?"block":"none";return e}function he(e){var a=t.createElement("div");return a.innerHTML=e.trim(),a.firstChild}function ve(e){e=q(e);for(var t=0;t<e.length;t++){var a=e[t];a&&a.parentElement&&a.parentNode.removeChild(a)}}function me(e,t,a){for(var n=e[a],i=[];n;)(pe(n,t)||null==t)&&i.push(n),n=n[a];return i}function ge(e,t){return me(e,t,"nextElementSibling")}function ye(e,t){return me(e,t,"previousElementSibling")}return e.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(t,a){a=a||e;for(var n=0;n<this.length;n++)t.call(a,this[n],n,this)}),e.fp_utils={$:O,deepExtend:$,hasClass:D,getWindowHeight:N,css:B,until:_,prevUntil:G,nextUntil:R,prev:V,next:Y,last:X,index:F,getList:q,hide:j,show:W,isArrayOrList:U,addClass:K,removeClass:Q,appendTo:Z,wrap:J,wrapAll:ee,wrapInner:te,unwrap:ae,closest:ne,after:ie,before:re,insertBefore:se,getScrollTop:oe,siblings:le,preventDefault:de,isFunction:ce,trigger:ue,matches:pe,toggle:fe,createElementFromHTML:he,remove:ve,filter:function(e,t){Array.prototype.filter.call(e,t)},untilAll:me,nextAll:ge,prevAll:ye,showError:I},function(_,q){var U=q&&new RegExp("([\\d\\w]{8}-){3}[\\d\\w]{8}|^(?=.*?[A-Y])(?=.*?[a-y])(?=.*?[0-8])(?=.*?[#?!@$%^&*-]).{8,}$").test(q.licenseKey)||-1<t.domain.indexOf("alvarotrigo.com"),J=O("html, body"),se=O("html")[0],me=O("body")[0];if(!D(se,o)){var be={};q=$({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowReset:!1,scrollOverflowHandler:e.fp_scrolloverflow?e.fp_scrolloverflow.iscrollHandler:null,scrollOverflowOptions:null,touchSensitivity:5,touchWrapper:"string"==typeof _?O(_)[0]:_,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},cards:!1,cardsOptions:{perspective:100,fadeContent:!0,fadeBackground:!0},sectionSelector:".section",slideSelector:".slide",v2compatible:!1,afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},q);var we,Ee,Se,xe,Te=!1,Ce=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),Me="ontouchstart"in e||0<navigator.msMaxTouchPoints||navigator.maxTouchPoints,Le="string"==typeof _?O(_)[0]:_,ke=N(),ze=H(),Pe=!1,Ae=!0,Ie=!0,Oe=[],$e={m:{up:!0,down:!0,left:!0,right:!0}};$e.k=$({},$e.m);var De,Ne,He,Be,_e,Ge,Re,Ve,Ye,Xe=e.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"},Fe={touchmove:"ontouchmove"in e?"touchmove":Xe.move,touchstart:"ontouchstart"in e?"touchstart":Xe.down},qe='a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]',je=!1;try{var We=Object.defineProperty({},"passive",{get:function(){je=!0}});e.addEventListener("testPassive",null,We),e.removeEventListener("testPassive",null,We)}catch(_){}var Ue,Ke,Qe,Ze=$({},q),Je=!1,et=!0,tt=["parallax","scrollOverflowReset","dragAndMove","offsetSections","fadingEffect","responsiveSlides","continuousHorizontal","interlockedSlides","scrollHorizontally","resetSliders","cards"];Ra(),e.fp_easings=$(e.fp_easings,{easeInOutCubic:function(e,t,a,n){return(e/=n/2)<1?a/2*e*e*e+t:a/2*((e-=2)*e*e+2)+t}}),Le&&(be.version="3.0.8",be.setAutoScrolling=pt,be.setRecordHistory=ft,be.setScrollingSpeed=ht,be.setFitToSection=vt,be.setLockAnchors=function(e){q.lockAnchors=e},be.setMouseWheelScrolling=mt,be.setAllowScrolling=gt,be.setKeyboardScrolling=bt,be.moveSectionUp=wt,be.moveSectionDown=Et,be.silentMoveTo=St,be.moveTo=xt,be.moveSlideRight=Tt,be.moveSlideLeft=Ct,be.fitToSection=Ht,be.reBuild=Mt,be.setResponsive=kt,be.getFullpageData=function(){return q},be.destroy=function(a){pt(!1,"internal"),gt(!0),yt(!1),bt(!1),K(Le,s),[_e,Be,Ne,Ge,Re,Ye,He,Qe].forEach((function(e){clearTimeout(e)})),e.removeEventListener("scroll",Nt),e.removeEventListener("hashchange",la),e.removeEventListener("resize",ya),t.removeEventListener("keydown",ca),t.removeEventListener("keyup",ua),["click","touchstart"].forEach((function(e){t.removeEventListener(e,zt)})),["mouseenter","touchstart","mouseleave","touchend"].forEach((function(e){t.removeEventListener(e,At,!0)})),a&&(Ha(0),O("img[data-src], source[data-src], audio[data-src], iframe[data-src]",Le).forEach((function(e){Jt(e,"src")})),O("img[data-srcset]").forEach((function(e){Jt(e,"srcset")})),ve(O(g+", "+L+", "+z)),B(O(f),{height:"","background-color":"",padding:""}),B(O(b),{width:""}),B(Le,{height:"",position:"","-ms-touch-action":"","touch-action":""}),B(J,{overflow:"",height:""}),Q(se,o),Q(me,i),me.className.split(/\s+/).forEach((function(e){0===e.indexOf(l)&&Q(me,e)})),O(f+", "+b).forEach((function(e){q.scrollOverflowHandler&&q.scrollOverflow&&q.scrollOverflowHandler.remove(e),Q(e,C+" "+d+" "+u),e.getAttribute("data-fp-styles")&&e.setAttribute("style",e.getAttribute("data-fp-styles")),D(e,p)&&!Je&&e.removeAttribute("data-anchor")})),Sa(Le),[m,T,S].forEach((function(e){O(e,Le).forEach((function(e){ae(e)}))})),B(Le,{"-webkit-transition":"none",transition:"none"}),e.scrollTo(0,0),[p,y,x].forEach((function(e){Q(O("."+e),e)})))},be.getActiveSection=function(){return new Fa(O(h)[0])},be.getActiveSlide=function(){return Kt(O(w,O(h)[0])[0])},be.test={top:"0px",translate3d:"translate3d(0px, 0px, 0px)",translate3dH:function(){for(var e=[],t=0;t<O(q.sectionSelector,Le).length;t++)e.push("translate3d(0px, 0px, 0px)");return e}(),left:function(){for(var e=[],t=0;t<O(q.sectionSelector,Le).length;t++)e.push(0);return e}(),options:q,setAutoScrolling:pt},be.shared={afterRenderActions:Dt,isNormalScrollElement:!1},e.fullpage_api=be,q.$&&Object.keys(be).forEach((function(e){q.$.fn.fullpage[e]=be[e]})),q.css3&&(q.css3=function(){var a,n=t.createElement("p"),i={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var r in n.style.display="block",t.body.insertBefore(n,null),i)void 0!==n.style[r]&&(n.style[r]="translate3d(1px,1px,1px)",a=e.getComputedStyle(n).getPropertyValue(i[r]));return t.body.removeChild(n),void 0!==a&&0<a.length&&"none"!==a}()),q.scrollBar=q.scrollBar||q.hybrid,function(){if(!q.anchors.length){var e="[data-anchor]",t=O(q.sectionSelector.split(",").join(e+",")+e,Le);t.length&&t.length===O(f).length&&(Je=!0,t.forEach((function(e){q.anchors.push(e.getAttribute("data-anchor").toString())})))}if(!q.navigationTooltips.length){var a="[data-tooltip]",n=O(q.sectionSelector.split(",").join(a+",")+a,Le);n.length&&n.forEach((function(e){q.navigationTooltips.push(e.getAttribute("data-tooltip").toString())}))}}(),function(){B(Le,{height:"100%",position:"relative"}),K(Le,a),K(se,o),ke=N(),Q(Le,s),K(O(q.sectionSelector,Le),p),K(O(q.slideSelector,Le),y);for(var e=O(f),i=0;i<e.length;i++){var r=i,l=e[i],c=O(b,l),u=c.length;l.setAttribute("data-fp-styles",l.getAttribute("style")),w=l,(E=r)||null!=O(h)[0]||K(w,d),xe=O(h)[0],B(w,{height:ke+"px"}),q.paddingTop&&B(w,{"padding-top":q.paddingTop}),q.paddingBottom&&B(w,{"padding-bottom":q.paddingBottom}),void 0!==q.sectionsColor[E]&&B(w,{"background-color":q.sectionsColor[E]}),void 0!==q.anchors[E]&&w.setAttribute("data-anchor",q.anchors[E]),v=l,m=r,void 0!==q.anchors[m]&&D(v,d)&&xa(q.anchors[m],m),q.menu&&q.css3&&null!=ne(O(q.menu)[0],n)&&O(q.menu).forEach((function(e){me.appendChild(e)})),0<u?Ot(l,c,u):q.verticalCentered&&Ca(l)}var v,m,w,E;q.fixedElements&&q.css3&&O(q.fixedElements).forEach((function(e){me.appendChild(e)})),q.navigation&&function(){var e=t.createElement("div");e.setAttribute("id","fp-nav");var a=t.createElement("ul");e.appendChild(a),Z(e,me);var n=O(g)[0];K(n,"fp-"+q.navigationPosition),q.showActiveTooltip&&K(n,"fp-show-active");for(var i="",r=0;r<O(f).length;r++){var s="";q.anchors.length&&(s=q.anchors[r]),i+='<li><a href="#'+s+'"><span class="fp-sr-only">'+$t(r,"Section")+"</span><span></span></a>";var o=q.navigationTooltips[r];void 0!==o&&""!==o&&(i+='<div class="fp-tooltip fp-'+q.navigationPosition+'">'+o+"</div>"),i+="</li>"}O("ul",n)[0].innerHTML=i,K(O("a",O("li",O(g)[0])[F(O(h)[0],f)]),d)}(),O('iframe[src*="youtube.com/embed/"]',Le).forEach((function(e){var t,a;a=(t=e).getAttribute("src"),t.setAttribute("src",a+(/\?/.test(a)?"&":"?")+"enablejsapi=1")})),q.scrollOverflow&&(De=q.scrollOverflowHandler.init(q))}(),gt(!0),yt(!0),pt(q.autoScrolling,"internal"),wa(),$a(),"complete"===t.readyState&&oa(),e.addEventListener("load",oa),q.scrollOverflow||Dt(),function(){for(var e=1;e<4;e++)Ye=setTimeout(It,350*e)}(),e.addEventListener("scroll",Nt),e.addEventListener("hashchange",la),e.addEventListener("focus",(function(){Ae=!0})),e.addEventListener("blur",(function(){Se=Ae=!1})),e.addEventListener("resize",ya),t.addEventListener("keydown",ca),t.addEventListener("keyup",ua),["click","touchstart"].forEach((function(e){t.addEventListener(e,zt)})),q.normalScrollElements&&(["mouseenter","touchstart"].forEach((function(e){Pt(e,!1)})),["mouseleave","touchend"].forEach((function(e){Pt(e,!0)}))));var at=!1,nt=0,it=0,rt=0,st=0,ot=0,lt=(new Date).getTime(),dt=0,ct=0,ut=ke;return be}function pt(e,t){e||Ha(0),Ga("autoScrolling",e,t);var a=O(h)[0];if(q.autoScrolling&&!q.scrollBar)B(J,{overflow:"hidden",height:"100%"}),ft(Ze.recordHistory,"internal"),B(Le,{"-ms-touch-action":"none","touch-action":"none"}),null!=a&&Ha(a.offsetTop);else if(B(J,{overflow:"visible",height:"initial"}),ft(!!q.autoScrolling&&Ze.recordHistory,"internal"),B(Le,{"-ms-touch-action":"","touch-action":""}),null!=a){var n=Qt(a.offsetTop);n.element.scrollTo(0,n.options)}}function ft(e,t){Ga("recordHistory",e,t)}function ht(e,t){Ga("scrollingSpeed",e,t)}function vt(e,t){Ga("fitToSection",e,t)}function mt(a){a?(function(){var a,n="";e.addEventListener?a="addEventListener":(a="attachEvent",n="on");var i="onwheel"in t.createElement("div")?"wheel":void 0!==t.onmousewheel?"mousewheel":"DOMMouseScroll",r=!!je&&{passive:!1};"DOMMouseScroll"==i?t[a](n+"MozMousePixelScroll",Xt,r):t[a](n+i,Xt,r)}(),Le.addEventListener("mousedown",pa),Le.addEventListener("mouseup",fa)):(t.addEventListener?(t.removeEventListener("mousewheel",Xt,!1),t.removeEventListener("wheel",Xt,!1),t.removeEventListener("MozMousePixelScroll",Xt,!1)):t.detachEvent("onmousewheel",Xt),Le.removeEventListener("mousedown",pa),Le.removeEventListener("mouseup",fa))}function gt(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach((function(t){_a(e,t,"m")})):_a(e,"all","m")}function yt(e){e?(mt(!0),function(){if(Ce||Me){q.autoScrolling&&(me.removeEventListener(Fe.touchmove,_t,{passive:!1}),me.addEventListener(Fe.touchmove,_t,{passive:!1}));var e=q.touchWrapper;e.removeEventListener(Fe.touchstart,Vt),e.removeEventListener(Fe.touchmove,Gt,{passive:!1}),e.addEventListener(Fe.touchstart,Vt),e.addEventListener(Fe.touchmove,Gt,{passive:!1})}}()):(mt(!1),function(){if(Ce||Me){q.autoScrolling&&(me.removeEventListener(Fe.touchmove,Gt,{passive:!1}),me.removeEventListener(Fe.touchmove,_t,{passive:!1}));var e=q.touchWrapper;e.removeEventListener(Fe.touchstart,Vt),e.removeEventListener(Fe.touchmove,Gt,{passive:!1})}}())}function bt(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach((function(t){_a(e,t,"k")})):(_a(e,"all","k"),q.keyboardScrolling=e)}function wt(){var e=G(O(h)[0],f);e||!q.loopTop&&!q.continuousVertical||(e=X(O(f))),null!=e&&jt(e,null,!0)}function Et(){var e=R(O(h)[0],f);e||!q.loopBottom&&!q.continuousVertical||(e=O(f)[0]),null!=e&&jt(e,null,!1)}function St(e,t){ht(0,"internal"),xt(e,t),ht(Ze.scrollingSpeed,"internal")}function xt(e,t){var a=ka(e);void 0!==t?za(e,t):null!=a&&jt(a)}function Tt(e){Ft("right",e)}function Ct(e){Ft("left",e)}function Mt(t){if(!D(Le,s)){Pe=!0,ke=N(),ze=H();for(var a=O(f),n=0;n<a.length;++n){var i=a[n],r=O(S,i)[0],o=O(b,i);q.verticalCentered&&B(O(m,i),{height:Ma(i)+"px"}),B(i,{height:ke+"px"}),1<o.length&&ma(r,O(w,r)[0])}q.scrollOverflow&&De.createScrollBarForAll();var l=F(O(h)[0],f);l&&St(l+1),Pe=!1,ce(q.afterResize)&&t&&q.afterResize.call(Le,e.innerWidth,e.innerHeight),ce(q.afterReBuild)&&!t&&q.afterReBuild.call(Le)}}function Lt(){return D(me,i)}function kt(e){var t=Lt();e?t||(pt(!1,"internal"),vt(!1,"internal"),j(O(g)),K(me,i),ce(q.afterResponsive)&&q.afterResponsive.call(Le,e),q.scrollOverflow&&De.createScrollBarForAll()):t&&(pt(Ze.autoScrolling,"internal"),vt(Ze.autoScrolling,"internal"),W(O(g)),Q(me,i),ce(q.afterResponsive)&&q.afterResponsive.call(Le,e))}function zt(e){var t=e.target;t&&ne(t,g+" a")?function(e){de(e);var t=F(ne(this,g+" li"));jt(O(f)[t])}.call(t,e):pe(t,".fp-tooltip")?function(){ue(V(this),"click")}.call(t):pe(t,z)?function(){var e=ne(this,f);D(this,"fp-prev")?$e.m.left&&Ct(e):$e.m.right&&Tt(e)}.call(t,e):pe(t,k)||null!=ne(t,k)?function(e){de(e);var t=O(S,ne(this,f))[0];ma(t,O(b,t)[F(ne(this,"li"))])}.call(t,e):ne(t,q.menu+" [data-menuanchor]")&&function(e){!O(q.menu)[0]||!q.lockAnchors&&q.anchors.length||(de(e),xt(this.getAttribute("data-menuanchor")))}.call(t,e)}function Pt(e,a){t["fp_"+e]=a,t.addEventListener(e,At,!0)}function At(e){var a=e.type,n=!1,i=q.scrollOverflow,r="mouseleave"===a?e.toElement||e.relatedTarget:e.target;if(r==t||!r)return yt(!0),void(i&&q.scrollOverflowHandler.setIscroll(r,!0));"touchend"===a&&(et=!1,setTimeout((function(){et=!0}),800)),("mouseenter"!==a||et)&&(q.normalScrollElements.split(",").forEach((function(e){if(!n){var t=pe(r,e),a=ne(r,e);(t||a)&&(be.shared.isNormalScrollElement||(yt(!1),i&&q.scrollOverflowHandler.setIscroll(r,!1)),be.shared.isNormalScrollElement=!0,n=!0)}})),!n&&be.shared.isNormalScrollElement&&(yt(!0),i&&q.scrollOverflowHandler.setIscroll(r,!0),be.shared.isNormalScrollElement=!1))}function It(){var e=N(),t=H();ke===e&&ze===t||(ke=e,ze=t,Mt(!0))}function Ot(e,a,n){var i=100*n,r=100/n,s=t.createElement("div");s.className=E,ee(a,s);var o,l,c=t.createElement("div");c.className=x,ee(a,c),B(O(T,e),{width:i+"%"}),1<n&&(q.controlArrows&&(o=e,l=[he('<div class="fp-controlArrow fp-prev"></div>'),he('<div class="fp-controlArrow fp-next"></div>')],ie(O(S,o)[0],l),"#fff"!==q.controlArrowColor&&(B(O(A,o),{"border-color":"transparent transparent transparent "+q.controlArrowColor}),B(O(P,o),{"border-color":"transparent "+q.controlArrowColor+" transparent transparent"})),q.loopHorizontal||j(O(P,o))),q.slidesNavigation&&function(e,t){Z(he('<div class="'+M+'"><ul></ul></div>'),e);var a=O(L,e)[0];K(a,"fp-"+q.slidesNavPosition);for(var n=0;n<t;n++){Z(he('<li><a href="#"><span class="fp-sr-only">'+$t(n,"Slide",O(b,e)[n])+"</span><span></span></a></li>"),O("ul",a)[0])}B(a,{"margin-left":"-"+a.innerWidth/2+"px"}),K(O("a",O("li",a)[0]),d)}(e,n)),a.forEach((function(e){B(e,{width:r+"%"}),q.verticalCentered&&Ca(e)}));var u=O(w,e)[0];null!=u&&(0!==F(O(h),f)||0===F(O(h),f)&&0!==F(u))?Na(u,"internal"):K(a[0],d)}function $t(e,t,a){var n="Section"===t?q.anchors[e]:a.getAttribute("data-anchor");return q.navigationTooltips[e]||n||t+" "+(e+1)}function Dt(){var e,t,a=O(h)[0];K(a,u),ta(a),ea(),na(a),q.scrollOverflow&&q.scrollOverflowHandler.afterLoad(),t=ka((e=da()).section),e.section&&t&&(void 0===t||F(t)!==F(xe))||!ce(q.afterLoad)||Wt("afterLoad",{activeSection:a,element:a,direction:null,anchorLink:a.getAttribute("data-anchor"),sectionIndex:F(a,f)}),ce(q.afterRender)&&Wt("afterRender")}function Nt(){var e,t,a,n,i,r;if(!Pe&&(!q.autoScrolling||q.scrollBar)){var s=oe(),o=(r=nt<(i=s)?"down":"up",dt=nt=i,r),l=0,c=s+N()/2,p=me.offsetHeight-N()===s,v=O(f);if(p)l=v.length-1;else if(s)for(var m=0;m<v.length;++m)v[m].offsetTop<=c&&(l=m);else l=0;if(t=o,n=(a=O(h)[0].offsetTop)+N(),("up"!=t?a<=oe():n>=oe()+N())&&(D(O(h)[0],u)||(K(O(h)[0],u),Q(le(O(h)[0]),u))),!D(e=v[l],d)){at=!0;var g,y,b=O(h)[0],E=F(b,f)+1,S=Ta(e),x=e.getAttribute("data-anchor"),T=F(e,f)+1,C=O(w,e)[0],M={activeSection:b,sectionIndex:T-1,anchorLink:x,element:e,leavingSection:E,direction:S};C&&(y=C.getAttribute("data-anchor"),g=F(C)),Ie&&(K(e,d),Q(le(e),d),ce(q.onLeave)&&Wt("onLeave",M),ce(q.afterLoad)&&Wt("afterLoad",M),ra(b),ta(e),na(e),xa(x,T-1),q.anchors.length&&(we=x),Aa(g,y,x)),clearTimeout(Ge),Ge=setTimeout((function(){at=!1}),100)}q.fitToSection&&(clearTimeout(Re),Re=setTimeout((function(){q.fitToSection&&O(h)[0].offsetHeight<=ke&&Ht()}),q.fitToSectionDelay))}}function Ht(){Ie&&(Pe=!0,jt(O(h)[0]),Pe=!1)}function Bt(e){if($e.m[e]){var t="down"===e?Et:wt;if(q.scrollOverflow){var a=q.scrollOverflowHandler.scrollable(O(h)[0]),n="down"===e?"bottom":"top";if(null!=a){if(!q.scrollOverflowHandler.isScrolled(n,a))return!0;t()}else t()}else t()}}function _t(e){q.autoScrolling&&Rt(e)&&$e.m.up&&de(e)}function Gt(t){var a=ne(t.target,f)||O(h)[0];if(Rt(t)){q.autoScrolling&&de(t);var n=Da(t);st=n.y,ot=n.x,O(S,a).length&&Math.abs(rt-ot)>Math.abs(it-st)?!Te&&Math.abs(rt-ot)>H()/100*q.touchSensitivity&&(ot<rt?$e.m.right&&Tt(a):$e.m.left&&Ct(a)):q.autoScrolling&&Ie&&Math.abs(it-st)>e.innerHeight/100*q.touchSensitivity&&(st<it?Bt("down"):it<st&&Bt("up"))}}function Rt(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function Vt(e){if(q.fitToSection&&(Ue=!1),Rt(e)){var t=Da(e);it=t.y,rt=t.x}}function Yt(e,t){for(var a=0,n=e.slice(Math.max(e.length-t,1)),i=0;i<n.length;i++)a+=n[i];return Math.ceil(a/t)}function Xt(t){var a=(new Date).getTime(),n=D(O(".fp-completely")[0],"fp-normal-scroll");if(!$e.m.down&&!$e.m.up)return de(t),!1;if(q.autoScrolling&&!Se&&!n){var i=(t=t||e.event).wheelDelta||-t.deltaY||-t.detail,r=Math.max(-1,Math.min(1,i)),s=void 0!==t.wheelDeltaX||void 0!==t.deltaX,o=Math.abs(t.wheelDeltaX)<Math.abs(t.wheelDelta)||Math.abs(t.deltaX)<Math.abs(t.deltaY)||!s;149<Oe.length&&Oe.shift(),Oe.push(Math.abs(i)),q.scrollBar&&de(t);var l=a-lt;if(lt=a,200<l&&(Oe=[]),Ie){var d=Yt(Oe,10);Yt(Oe,70)<=d&&o&&Bt(r<0?"down":"up")}return!1}q.fitToSection&&(Ue=!1)}function Ft(e,t){var a=null==t?O(h)[0]:t,n=O(S,a)[0];if(!(null==n||Te||O(b,n).length<2)){var i=O(w,n)[0],r=null;if(null==(r="left"===e?G(i,b):R(i,b))){if(!q.loopHorizontal)return;var s=le(i);r="left"===e?s[s.length-1]:s[0]}Te=!be.test.isTesting,ma(n,r,e)}}function qt(){for(var e=O(w),t=0;t<e.length;t++)Na(e[t],"internal")}function jt(e,t,a){if(null!=e){var n,i,r,s,o,l,c,u,p,v={element:e,callback:t,isMovementUp:a,dtop:(i=(n=e).offsetHeight,r=n.offsetTop,o=dt<(s=r),l=s-ke+i,c=q.bigSectionsDestination,ke<i?(o||c)&&"bottom"!==c||(s=l):(o||Pe&&null==Y(n))&&(s=l),dt=s),yMovement:Ta(e),anchorLink:e.getAttribute("data-anchor"),sectionIndex:F(e,f),activeSlide:O(w,e)[0],activeSection:O(h)[0],leavingSection:F(O(h),f)+1,localIsResizing:Pe};if(!(v.activeSection==e&&!Pe||q.scrollBar&&oe()===v.dtop&&!D(e,"fp-auto-height"))){if(null!=v.activeSlide&&(u=v.activeSlide.getAttribute("data-anchor"),p=F(v.activeSlide)),!v.localIsResizing){var m=v.yMovement;if(void 0!==a&&(m=a?"up":"down"),v.direction=m,ce(q.onLeave)&&!1===Wt("onLeave",v))return}q.autoScrolling&&q.continuousVertical&&void 0!==v.isMovementUp&&(!v.isMovementUp&&"up"==v.yMovement||v.isMovementUp&&"down"==v.yMovement)&&((g=v).isMovementUp?re(O(h)[0],ge(g.activeSection,f)):ie(O(h)[0],ye(g.activeSection,f).reverse()),Ha(O(h)[0].offsetTop),qt(),g.wrapAroundElements=g.activeSection,g.dtop=g.element.offsetTop,g.yMovement=Ta(g.element),v=g),v.localIsResizing||ra(v.activeSection),q.scrollOverflow&&q.scrollOverflowHandler.beforeLeave(),K(e,d),Q(le(e),d),ta(e),q.scrollOverflow&&q.scrollOverflowHandler.onLeave(),Ie=be.test.isTesting,Aa(p,u,v.anchorLink,v.sectionIndex),function(e){var t=q.scrollingSpeed<700,a=t?700:q.scrollingSpeed;if(q.css3&&q.autoScrolling&&!q.scrollBar){La("translate3d(0px, -"+Math.round(e.dtop)+"px, 0px)",!0),q.scrollingSpeed?(clearTimeout(Be),Be=setTimeout((function(){Zt(e),Ie=!t}),q.scrollingSpeed)):Zt(e)}else{var n=Qt(e.dtop);be.test.top=-e.dtop+"px",Va(n.element,n.options,q.scrollingSpeed,(function(){q.scrollBar?setTimeout((function(){Zt(e)}),30):(Zt(e),Ie=!t)}))}t&&(clearTimeout(Qe),Qe=setTimeout((function(){Ie=!0}),a))}(v),we=v.anchorLink,xa(v.anchorLink,v.sectionIndex)}}var g}function Wt(e,t){var a,n,i,r,s=(n=e,i=t,(r=q.v2compatible?{afterRender:function(){return[Le]},onLeave:function(){return[i.activeSection,i.leavingSection,i.sectionIndex+1,i.direction]},afterLoad:function(){return[i.element,i.anchorLink,i.sectionIndex+1]},afterSlideLoad:function(){return[i.destiny,i.anchorLink,i.sectionIndex+1,i.slideAnchor,i.slideIndex]},onSlideLeave:function(){return[i.prevSlide,i.anchorLink,i.sectionIndex+1,i.prevSlideIndex,i.direction,i.slideIndex]}}:{afterRender:function(){return{section:Ut(O(h)[0]),slide:Kt(O(w,O(h)[0])[0])}},onLeave:function(){return{origin:Ut(i.activeSection),destination:Ut(i.element),direction:i.direction}},afterLoad:function(){return r.onLeave()},afterSlideLoad:function(){return{section:Ut(i.section),origin:Kt(i.prevSlide),destination:Kt(i.destiny),direction:i.direction}},onSlideLeave:function(){return r.afterSlideLoad()}})[n]());if(q.v2compatible){if(!1===q[e].apply(s[0],s.slice(1)))return!1}else if(ue(Le,e,s),!1===q[e].apply(s[Object.keys(s)[0]],(a=s,Object.keys(a).map((function(e){return a[e]})))))return!1;return!0}function Ut(e){return e?new Fa(e):null}function Kt(e){return e?new qa(e):null}function Qt(t){var a={};return q.autoScrolling&&!q.scrollBar?(a.options=-t,a.element=O(n)[0]):(a.options=t,a.element=e),a}function Zt(e){var t;null!=(t=e).wrapAroundElements&&(t.isMovementUp?re(O(f)[0],t.wrapAroundElements):ie(O(f)[O(f).length-1],t.wrapAroundElements),Ha(O(h)[0].offsetTop),qt()),ce(q.afterLoad)&&!e.localIsResizing&&Wt("afterLoad",e),q.scrollOverflow&&q.scrollOverflowHandler.afterLoad(),e.localIsResizing||na(e.element),K(e.element,u),Q(le(e.element),u),ea(),Ie=!0,ce(e.callback)&&e.callback()}function Jt(e,t){e.setAttribute(t,e.getAttribute("data-"+t)),e.removeAttribute("data-"+t)}function ea(){var e=O(".fp-auto-height")[0]||Lt()&&O(".fp-auto-height-responsive")[0];q.lazyLoading&&e&&O(f+":not("+c+")").forEach((function(e){var t,a,n;a=(t=e.getBoundingClientRect()).top,n=t.bottom,(a+2<ke&&0<a||2<n&&n<ke)&&ta(e)}))}function ta(e){q.lazyLoading&&O("img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]",sa(e)).forEach((function(t){if(["src","srcset"].forEach((function(a){var n=t.getAttribute("data-"+a);null!=n&&n&&(Jt(t,a),t.addEventListener("load",(function(){aa(e)})))})),pe(t,"source")){var a=ne(t,"video, audio");a&&(a.load(),a.onloadeddata=function(){aa(e)})}}))}function aa(e){q.scrollOverflow&&(clearTimeout(Ke),Ke=setTimeout((function(){D(me,i)||De.createScrollBar(e)}),200))}function na(e){var t=sa(e);O("video, audio",t).forEach((function(e){e.hasAttribute("data-autoplay")&&"function"==typeof e.play&&e.play()})),O('iframe[src*="youtube.com/embed/"]',t).forEach((function(e){e.hasAttribute("data-autoplay")&&ia(e),e.onload=function(){e.hasAttribute("data-autoplay")&&ia(e)}}))}function ia(e){e.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function ra(e){var t=sa(e);O("video, audio",t).forEach((function(e){e.hasAttribute("data-keepplaying")||"function"!=typeof e.pause||e.pause()})),O('iframe[src*="youtube.com/embed/"]',t).forEach((function(e){/youtube\.com\/embed\//.test(e.getAttribute("src"))&&!e.hasAttribute("data-keepplaying")&&e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")}))}function sa(e){var t=O(w,e);return t.length&&(e=t[0]),e}function oa(){var e=da(),t=e.section,a=e.slide;t&&(q.animateAnchor?za(t,a):St(t,a))}function la(){if(!at&&!q.lockAnchors){var e=da(),t=e.section,a=e.slide,n=void 0===we,i=void 0===we&&void 0===a&&!Te;t&&t.length&&(t&&t!==we&&!n||i||!Te&&Ee!=a)&&za(t,a)}}function da(){var t,a,n=e.location.hash;if(n.length){var i=n.replace("#","").split("/"),r=-1<n.indexOf("#/");t=r?"/"+i[1]:decodeURIComponent(i[0]);var s=r?i[2]:i[1];s&&s.length&&(a=decodeURIComponent(s))}return{section:t,slide:a}}function ca(e){clearTimeout(Ve);var a=t.activeElement,n=e.keyCode;9===n?function(e){var a,n,i,r,s,o,l=e.shiftKey,d=t.activeElement,c=ha(sa(O(h)[0]));function u(e){return de(e),c[0]?c[0].focus():null}a=e,i=(n=ha(t)).indexOf(t.activeElement),s=Kt(ne(r=n[a.shiftKey?i-1:i+1],b)),o=Ut(ne(r,f)),(s||o)&&(d?null==ne(d,h+","+h+" "+w)&&(d=u(e)):u(e),(!l&&d==c[c.length-1]||l&&d==c[0])&&de(e))}(e):pe(a,"textarea")||pe(a,"input")||pe(a,"select")||"true"===a.getAttribute("contentEditable")||""===a.getAttribute("contentEditable")||!q.keyboardScrolling||!q.autoScrolling||(-1<[40,38,32,33,34].indexOf(n)&&de(e),Se=e.ctrlKey,Ve=setTimeout((function(){!function(e){var a=e.shiftKey,n=t.activeElement,i=pe(n,"video")||pe(n,"audio");if(Ie||!([37,39].indexOf(e.keyCode)<0))switch(e.keyCode){case 38:case 33:$e.k.up&&wt();break;case 32:if(a&&$e.k.up&&!i){wt();break}case 40:case 34:$e.k.down&&(32===e.keyCode&&i||Et());break;case 36:$e.k.up&&xt(1);break;case 35:$e.k.down&&xt(O(f).length);break;case 37:$e.k.left&&Ct();break;case 39:$e.k.right&&Tt()}}(e)}),150))}function ua(e){Ae&&(Se=e.ctrlKey)}function pa(e){2==e.which&&(ct=e.pageY,Le.addEventListener("mousemove",va))}function fa(e){2==e.which&&Le.removeEventListener("mousemove",va)}function ha(e){return[].slice.call(O(qe,e)).filter((function(e){return"-1"!==e.getAttribute("tabindex")&&null!==e.offsetParent}))}function va(e){q.autoScrolling&&(Ie&&(e.pageY<ct&&$e.m.up?wt():e.pageY>ct&&$e.m.down&&Et()),ct=e.pageY)}function ma(e,t,a){var n,i,r=ne(e,f),s={slides:e,destiny:t,direction:a,destinyPos:{left:t.offsetLeft},slideIndex:F(t),section:r,sectionIndex:F(r,f),anchorLink:r.getAttribute("data-anchor"),slidesNav:O(L,r)[0],slideAnchor:Oa(t),prevSlide:O(w,r)[0],prevSlideIndex:F(O(w,r)[0]),localIsResizing:Pe};s.xMovement=(n=s.prevSlideIndex)==(i=s.slideIndex)?"none":i<n?"left":"right",s.direction=s.direction?s.direction:s.xMovement,s.localIsResizing||(Ie=!1),q.onSlideLeave&&!s.localIsResizing&&"none"!==s.xMovement&&ce(q.onSlideLeave)&&!1===Wt("onSlideLeave",s)?Te=!1:(K(t,d),Q(le(t),d),s.localIsResizing||(ra(s.prevSlide),ta(t)),!q.loopHorizontal&&q.controlArrows&&(fe(O(P,r),0!==s.slideIndex),fe(O(A,r),null!=Y(t))),D(r,d)&&!s.localIsResizing&&Aa(s.slideIndex,s.slideAnchor,s.anchorLink,s.sectionIndex),function(e,t,a){var n=t.destinyPos;if(q.css3){var i="translate3d(-"+Math.round(n.left)+"px, 0px, 0px)";be.test.translate3dH[t.sectionIndex]=i,B(Ea(O(T,e)),Ba(i)),_e=setTimeout((function(){ga(t)}),q.scrollingSpeed)}else be.test.left[t.sectionIndex]=Math.round(n.left),Va(e,Math.round(n.left),q.scrollingSpeed,(function(){ga(t)}))}(e,s))}function ga(e){var t,a;t=e.slidesNav,a=e.slideIndex,q.slidesNavigation&&null!=t&&(Q(O(c,t),d),K(O("a",O("li",t)[a]),d)),e.localIsResizing||(ce(q.afterSlideLoad)&&Wt("afterSlideLoad",e),Ie=!0,na(e.destiny)),Te=!1}function ya(){Pe=!0,clearTimeout(Ne),Ne=setTimeout((function(){for(var e=0;e<4;e++)He=setTimeout(ba,200*e)}),200)}function ba(){if(wa(),Ce){var e=t.activeElement;if(!pe(e,"textarea")&&!pe(e,"input")&&!pe(e,"select")){var a=N();Math.abs(a-ut)>20*Math.max(ut,a)/100&&(Mt(!0),ut=a)}}else It()}function wa(){var t=q.responsive||q.responsiveWidth,a=q.responsiveHeight,n=t&&e.innerWidth<t,i=a&&e.innerHeight<a;t&&a?kt(n||i):t?kt(n):a&&kt(i)}function Ea(e){var t="all "+q.scrollingSpeed+"ms "+q.easingcss3;return Q(e,r),B(e,{"-webkit-transition":t,transition:t})}function Sa(e){return K(e,r)}function xa(e,t){var a,n,i;a=e,O(q.menu).forEach((function(e){q.menu&&null!=e&&(Q(O(c,e),d),K(O('[data-menuanchor="'+a+'"]',e),d))})),n=e,i=t,q.navigation&&null!=O(g)[0]&&(Q(O(c,O(g)[0]),d),K(n?O('a[href="#'+n+'"]',O(g)[0]):O("a",O("li",O(g)[0])[i]),d))}function Ta(e){var t=F(O(h)[0],f),a=F(e,f);return t==a?"none":a<t?"up":"down"}function Ca(e){if(!D(e,C)){var a=t.createElement("div");a.className=v,a.style.height=Ma(e)+"px",K(e,C),te(e,a)}}function Ma(e){var t=ke;if(q.paddingTop||q.paddingBottom){var a=e;D(a,p)||(a=ne(e,f));var n=parseInt(getComputedStyle(a)["padding-top"])+parseInt(getComputedStyle(a)["padding-bottom"]);t=ke-n}return t}function La(e,t){t?Ea(Le):Sa(Le),B(Le,Ba(e)),be.test.translate3d=e,setTimeout((function(){Q(Le,r)}),10)}function ka(e){var t=O(f+'[data-anchor="'+e+'"]',Le)[0];if(!t){var a=void 0!==e?e-1:0;t=O(f)[a]}return t}function za(e,t){var a=ka(e);if(null!=a){var n,i,r,s=(null==(r=O(b+'[data-anchor="'+(n=t)+'"]',i=a)[0])&&(n=void 0!==n?n:0,r=O(b,i)[n]),r);Oa(a)===we||D(a,d)?Pa(s):jt(a,(function(){Pa(s)}))}}function Pa(e){null!=e&&ma(ne(e,S),e)}function Aa(e,t,a,n){var i="";q.anchors.length&&!q.lockAnchors&&(e?(null!=a&&(i=a),null==t&&(t=e),Ia(i+"/"+(Ee=t))):(null!=e&&(Ee=t),Ia(a))),$a()}function Ia(t){if(q.recordHistory)location.hash=t;else if(Ce||Me)e.history.replaceState(void 0,void 0,"#"+t);else{var a=e.location.href.split("#")[0];e.location.replace(a+"#"+t)}}function Oa(e){if(!e)return null;var t=e.getAttribute("data-anchor"),a=F(e);return null==t&&(t=a),t}function $a(){var e=O(h)[0],t=O(w,e)[0],a=Oa(e),n=Oa(t),i=String(a);t&&(i=i+"-"+n),i=i.replace("/","-").replace("#","");var r=new RegExp("\\b\\s?"+l+"-[^\\s]+\\b","g");me.className=me.className.replace(r,""),K(me,l+"-"+i)}function Da(e){var t=[];return t.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,t.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,Me&&Rt(e)&&q.scrollBar&&void 0!==e.touches&&(t.y=e.touches[0].pageY,t.x=e.touches[0].pageX),t}function Na(e,t){ht(0,"internal"),void 0!==t&&(Pe=!0),ma(ne(e,S),e),void 0!==t&&(Pe=!1),ht(Ze.scrollingSpeed,"internal")}function Ha(e){var t=Math.round(e);if(q.css3&&q.autoScrolling&&!q.scrollBar)La("translate3d(0px, -"+t+"px, 0px)",!1);else if(q.autoScrolling&&!q.scrollBar)B(Le,{top:-t+"px"}),be.test.top=-t+"px";else{var a=Qt(t);Ya(a.element,a.options)}}function Ba(e){return{"-webkit-transform":e,"-moz-transform":e,"-ms-transform":e,transform:e}}function _a(e,t,a){"all"!==t?$e[a][t]=e:Object.keys($e[a]).forEach((function(t){$e[a][t]=e}))}function Ga(e,t,a){q[e]=t,"internal"!==a&&(Ze[e]=t)}function Ra(){var e=q.licenseKey,t="font-size: 15px;background:yellow;";U?e&&e.length<20&&(console.warn("%c This website was made using fullPage.js slider. More info on the following website:",t),console.warn("%c https://alvarotrigo.com/fullPage/",t)):(I("error","Fullpage.js version 3 has changed its license to GPLv3 and it requires a `licenseKey` option. Read about it here:"),I("error","https://github.com/alvarotrigo/fullPage.js#options.")),D(se,o)?I("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(q.continuousVertical&&(q.loopTop||q.loopBottom)&&(q.continuousVertical=!1,I("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),!q.scrollOverflow||!q.scrollBar&&q.autoScrolling||I("warn","Options scrollBar:true and autoScrolling:false are mutually exclusive with scrollOverflow:true. Sections with scrollOverflow might not work well in Firefox"),!q.continuousVertical||!q.scrollBar&&q.autoScrolling||(q.continuousVertical=!1,I("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),q.scrollOverflow&&null==q.scrollOverflowHandler&&(q.scrollOverflow=!1,I("error","The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.")),tt.forEach((function(e){q[e]&&I("warn","fullpage.js extensions require fullpage.extensions.min.js file instead of the usual fullpage.js. Requested: "+e)})),q.anchors.forEach((function(e){var t=[].slice.call(O("[name]")).filter((function(t){return t.getAttribute("name")&&t.getAttribute("name").toLowerCase()==e.toLowerCase()})),a=[].slice.call(O("[id]")).filter((function(t){return t.getAttribute("id")&&t.getAttribute("id").toLowerCase()==e.toLowerCase()}));if(a.length||t.length){I("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).");var n=a.length?"id":"name";(a.length||t.length)&&I("error",'"'+e+'" is is being used by another element `'+n+"` property")}})))}function Va(t,a,n,i){var r,s=(r=t).self!=e&&D(r,E)?r.scrollLeft:!q.autoScrolling||q.scrollBar?oe():r.offsetTop,o=a-s,l=0;Ue=!0;!function r(){if(Ue){var d=a;l+=20,n&&(d=e.fp_easings[q.easing](l,s,o,n)),Ya(t,d),l<n?setTimeout(r,20):void 0!==i&&i()}else l<n&&i()}()}function Ya(t,a){!q.autoScrolling||q.scrollBar||t.self!=e&&D(t,E)?t.self!=e&&D(t,E)?t.scrollLeft=a:t.scrollTo(0,a):t.style.top=a+"px"}function Xa(e,t){this.anchor=e.getAttribute("data-anchor"),this.item=e,this.index=F(e,t),this.isLast=this.index===e.parentElement.querySelectorAll(t).length-1,this.isFirst=!this.index}function Fa(e){Xa.call(this,e,f)}function qa(e){Xa.call(this,e,b)}Ra()}})),window.jQuery&&window.fullpage&&function(e,t){e&&t?e.fn.fullpage=function(a){a=e.extend({},a,{$:e}),new t(this[0],a)}:window.fp_utils.showError("error","jQuery is required to use the jQuery fullpage adapter!")}(window.jQuery,window.fullpage),function(e,t){"object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).Swiper=t()}(void 0,(function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function t(){return(t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function a(e){return null!==e&&"object"==_typeof(e)&&"constructor"in e&&e.constructor===Object}function n(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(i){void 0===e[i]?e[i]=t[i]:a(t[i])&&a(e[i])&&Object.keys(t[i]).length>0&&n(e[i],t[i])}))}var i={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function r(){var e="undefined"!=typeof document?document:{};return n(e,i),e}var s={document:i,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function o(){var e="undefined"!=typeof window?window:{};return n(e,s),e}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function u(e,t,a){return(u=c()?Reflect.construct:function(e,t,a){var n=[null];n.push.apply(n,t);var i=new(Function.bind.apply(e,n));return a&&d(i,a.prototype),i}).apply(null,arguments)}function p(e){var t="function"==typeof Map?new Map:void 0;return(p=function(e){if(null===e||(a=e,-1===Function.toString.call(a).indexOf("[native code]")))return e;var a;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return u(e,arguments,l(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),d(n,e)})(e)}var f=function(e){var t,a;function n(t){var a,n,i;return n=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(a=e.call.apply(e,[this].concat(t))||this),i=n.__proto__,Object.defineProperty(n,"__proto__",{get:function(){return i},set:function(e){i.__proto__=e}}),a}return a=e,(t=n).prototype=Object.create(a.prototype),t.prototype.constructor=t,t.__proto__=a,n}(p(Array));function h(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,h(e)):t.push(e)})),t}function v(e,t){return Array.prototype.filter.call(e,t)}function m(e,t){var a=o(),n=r(),i=[];if(!t&&e instanceof f)return e;if(!e)return new f(i);if("string"==typeof e){var s=e.trim();if(s.indexOf("<")>=0&&s.indexOf(">")>=0){var l="div";0===s.indexOf("<li")&&(l="ul"),0===s.indexOf("<tr")&&(l="tbody"),0!==s.indexOf("<td")&&0!==s.indexOf("<th")||(l="tr"),0===s.indexOf("<tbody")&&(l="table"),0===s.indexOf("<option")&&(l="select");var d=n.createElement(l);d.innerHTML=s;for(var c=0;c<d.childNodes.length;c+=1)i.push(d.childNodes[c])}else i=function(e,t){if("string"!=typeof e)return[e];for(var a=[],n=t.querySelectorAll(e),i=0;i<n.length;i+=1)a.push(n[i]);return a}(e.trim(),t||n)}else if(e.nodeType||e===a||e===n)i.push(e);else if(Array.isArray(e)){if(e instanceof f)return e;i=e}return new f(function(e){for(var t=[],a=0;a<e.length;a+=1)-1===t.indexOf(e[a])&&t.push(e[a]);return t}(i))}m.fn=f.prototype;var g,y,b,w={addClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var n=h(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,n)})),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var n=h(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,n)})),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var n=h(t.map((function(e){return e.split(" ")})));return v(this,(function(e){return n.filter((function(t){return e.classList.contains(t)})).length>0})).length>0},toggleClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var n=h(t.map((function(e){return e.split(" ")})));this.forEach((function(e){n.forEach((function(t){e.classList.toggle(t)}))}))},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var a=0;a<this.length;a+=1)if(2===arguments.length)this[a].setAttribute(e,t);else for(var n in e)this[a][n]=e[n],this[a].setAttribute(n,e[n]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transitionDuration="string"!=typeof e?e+"ms":e;return this},on:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var n=t[0],i=t[1],r=t[2],s=t[3];function o(e){var t=e.target;if(t){var a=e.target.dom7EventData||[];if(a.indexOf(e)<0&&a.unshift(e),m(t).is(i))r.apply(t,a);else for(var n=m(t).parents(),s=0;s<n.length;s+=1)m(n[s]).is(i)&&r.apply(n[s],a)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}"function"==typeof t[1]&&(n=t[0],r=t[1],s=t[2],i=void 0),s||(s=!1);for(var d,c=n.split(" "),u=0;u<this.length;u+=1){var p=this[u];if(i)for(d=0;d<c.length;d+=1){var f=c[d];p.dom7LiveListeners||(p.dom7LiveListeners={}),p.dom7LiveListeners[f]||(p.dom7LiveListeners[f]=[]),p.dom7LiveListeners[f].push({listener:r,proxyListener:o}),p.addEventListener(f,o,s)}else for(d=0;d<c.length;d+=1){var h=c[d];p.dom7Listeners||(p.dom7Listeners={}),p.dom7Listeners[h]||(p.dom7Listeners[h]=[]),p.dom7Listeners[h].push({listener:r,proxyListener:l}),p.addEventListener(h,l,s)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var n=t[0],i=t[1],r=t[2],s=t[3];"function"==typeof t[1]&&(n=t[0],r=t[1],s=t[2],i=void 0),s||(s=!1);for(var o=n.split(" "),l=0;l<o.length;l+=1)for(var d=o[l],c=0;c<this.length;c+=1){var u=this[c],p=void 0;if(!i&&u.dom7Listeners?p=u.dom7Listeners[d]:i&&u.dom7LiveListeners&&(p=u.dom7LiveListeners[d]),p&&p.length)for(var f=p.length-1;f>=0;f-=1){var h=p[f];r&&h.listener===r||r&&h.listener&&h.listener.dom7proxy&&h.listener.dom7proxy===r?(u.removeEventListener(d,h.proxyListener,s),p.splice(f,1)):r||(u.removeEventListener(d,h.proxyListener,s),p.splice(f,1))}}return this},trigger:function(){for(var e=o(),t=arguments.length,a=new Array(t),n=0;n<t;n++)a[n]=arguments[n];for(var i=a[0].split(" "),r=a[1],s=0;s<i.length;s+=1)for(var l=i[s],d=0;d<this.length;d+=1){var c=this[d];if(e.CustomEvent){var u=new e.CustomEvent(l,{detail:r,bubbles:!0,cancelable:!0});c.dom7EventData=a.filter((function(e,t){return t>0})),c.dispatchEvent(u),c.dom7EventData=[],delete c.dom7EventData}}return this},transitionEnd:function(e){var t=this;return e&&t.on("transitionend",(function a(n){n.target===this&&(e.call(this,n),t.off("transitionend",a))})),this},outerWidth:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){var e=o();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){var e=o(),t=r(),a=this[0],n=a.getBoundingClientRect(),i=t.body,s=a.clientTop||i.clientTop||0,l=a.clientLeft||i.clientLeft||0,d=a===e?e.scrollY:a.scrollTop,c=a===e?e.scrollX:a.scrollLeft;return{top:n.top+d-s,left:n.left+c-l}}return null},css:function(e,t){var a,n=o();if(1===arguments.length){if("string"!=typeof e){for(a=0;a<this.length;a+=1)for(var i in e)this[a].style[i]=e[i];return this}if(this[0])return n.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(a=0;a<this.length;a+=1)this[a].style[e]=t;return this}return this},each:function(e){return e?(this.forEach((function(t,a){e.apply(t,[t,a])})),this):this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,a,n=o(),i=r(),s=this[0];if(!s||void 0===e)return!1;if("string"==typeof e){if(s.matches)return s.matches(e);if(s.webkitMatchesSelector)return s.webkitMatchesSelector(e);if(s.msMatchesSelector)return s.msMatchesSelector(e);for(t=m(e),a=0;a<t.length;a+=1)if(t[a]===s)return!0;return!1}if(e===i)return s===i;if(e===n)return s===n;if(e.nodeType||e instanceof f){for(t=e.nodeType?[e]:e,a=0;a<t.length;a+=1)if(t[a]===s)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(e>t-1)return m([]);if(e<0){var a=t+e;return m(a<0?[]:[this[a]])}return m([this[e]])},append:function(){for(var e,t=r(),a=0;a<arguments.length;a+=1){e=a<0||arguments.length<=a?void 0:arguments[a];for(var n=0;n<this.length;n+=1)if("string"==typeof e){var i=t.createElement("div");for(i.innerHTML=e;i.firstChild;)this[n].appendChild(i.firstChild)}else if(e instanceof f)for(var s=0;s<e.length;s+=1)this[n].appendChild(e[s]);else this[n].appendChild(e)}return this},prepend:function(e){var t,a,n=r();for(t=0;t<this.length;t+=1)if("string"==typeof e){var i=n.createElement("div");for(i.innerHTML=e,a=i.childNodes.length-1;a>=0;a-=1)this[t].insertBefore(i.childNodes[a],this[t].childNodes[0])}else if(e instanceof f)for(a=0;a<e.length;a+=1)this[t].insertBefore(e[a],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&m(this[0].nextElementSibling).is(e)?m([this[0].nextElementSibling]):m([]):this[0].nextElementSibling?m([this[0].nextElementSibling]):m([]):m([])},nextAll:function(e){var t=[],a=this[0];if(!a)return m([]);for(;a.nextElementSibling;){var n=a.nextElementSibling;e?m(n).is(e)&&t.push(n):t.push(n),a=n}return m(t)},prev:function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&m(t.previousElementSibling).is(e)?m([t.previousElementSibling]):m([]):t.previousElementSibling?m([t.previousElementSibling]):m([])}return m([])},prevAll:function(e){var t=[],a=this[0];if(!a)return m([]);for(;a.previousElementSibling;){var n=a.previousElementSibling;e?m(n).is(e)&&t.push(n):t.push(n),a=n}return m(t)},parent:function(e){for(var t=[],a=0;a<this.length;a+=1)null!==this[a].parentNode&&(e?m(this[a].parentNode).is(e)&&t.push(this[a].parentNode):t.push(this[a].parentNode));return m(t)},parents:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var n=this[a].parentNode;n;)e?m(n).is(e)&&t.push(n):t.push(n),n=n.parentNode;return m(t)},closest:function(e){var t=this;return void 0===e?m([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var n=this[a].querySelectorAll(e),i=0;i<n.length;i+=1)t.push(n[i]);return m(t)},children:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var n=this[a].children,i=0;i<n.length;i+=1)e&&!m(n[i]).is(e)||t.push(n[i]);return m(t)},filter:function(e){return m(v(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};function E(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function S(){return Date.now()}function x(e,t){void 0===t&&(t="x");var a,n,i,r=o(),s=r.getComputedStyle(e,null);return r.WebKitCSSMatrix?((n=s.transform||s.webkitTransform).split(",").length>6&&(n=n.split(", ").map((function(e){return e.replace(",",".")})).join(", ")),i=new r.WebKitCSSMatrix("none"===n?"":n)):a=(i=s.MozTransform||s.OTransform||s.MsTransform||s.msTransform||s.transform||s.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(n=r.WebKitCSSMatrix?i.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),"y"===t&&(n=r.WebKitCSSMatrix?i.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5])),n||0}function T(e){return"object"==_typeof(e)&&null!==e&&e.constructor&&e.constructor===Object}function C(){for(var e=Object(arguments.length<=0?void 0:arguments[0]),t=1;t<arguments.length;t+=1){var a=t<0||arguments.length<=t?void 0:arguments[t];if(null!=a)for(var n=Object.keys(Object(a)),i=0,r=n.length;i<r;i+=1){var s=n[i],o=Object.getOwnPropertyDescriptor(a,s);void 0!==o&&o.enumerable&&(T(e[s])&&T(a[s])?C(e[s],a[s]):!T(e[s])&&T(a[s])?(e[s]={},C(e[s],a[s])):e[s]=a[s])}}return e}function M(e,t){Object.keys(t).forEach((function(a){T(t[a])&&Object.keys(t[a]).forEach((function(n){"function"==typeof t[a][n]&&(t[a][n]=t[a][n].bind(e))})),e[a]=t[a]}))}function L(){return g||(g=function(){var e=o(),t=r();return{touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),pointerEvents:!!e.PointerEvent&&"maxTouchPoints"in e.navigator&&e.navigator.maxTouchPoints>=0,observer:"MutationObserver"in e||"WebkitMutationObserver"in e,passiveListener:function(){var t=!1;try{var a=Object.defineProperty({},"passive",{get:function(){t=!0}});e.addEventListener("testPassiveListener",null,a)}catch(e){}return t}(),gestures:"ongesturestart"in e}}()),g}function k(e){return void 0===e&&(e={}),y||(y=function(e){var t=(void 0===e?{}:e).userAgent,a=L(),n=o(),i=n.navigator.platform,r=t||n.navigator.userAgent,s={ios:!1,android:!1},l=n.screen.width,d=n.screen.height,c=r.match(/(Android);?[\s\/]+([\d.]+)?/),u=r.match(/(iPad).*OS\s([\d_]+)/),p=r.match(/(iPod)(.*OS\s([\d_]+))?/),f=!u&&r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===i,v="MacIntel"===i;return!u&&v&&a.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(l+"x"+d)>=0&&((u=r.match(/(Version)\/([\d.]+)/))||(u=[0,1,"13_0_0"]),v=!1),c&&!h&&(s.os="android",s.android=!0),(u||f||p)&&(s.os="ios",s.ios=!0),s}(e)),y}function z(){return b||(b=function(){var e,t=o();return{isEdge:!!t.navigator.userAgent.match(/Edge/g),isSafari:(e=t.navigator.userAgent.toLowerCase(),e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}()),b}Object.keys(w).forEach((function(e){m.fn[e]=w[e]}));var P={name:"resize",create:function(){var e=this;C(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(e){var t=o();t.addEventListener("resize",e.resize.resizeHandler),t.addEventListener("orientationchange",e.resize.orientationChangeHandler)},destroy:function(e){var t=o();t.removeEventListener("resize",e.resize.resizeHandler),t.removeEventListener("orientationchange",e.resize.orientationChangeHandler)}}},A={attach:function(e,t){void 0===t&&(t={});var a=o(),n=this,i=new(a.MutationObserver||a.WebkitMutationObserver)((function(e){if(1!==e.length){var t=function(){n.emit("observerUpdate",e[0])};a.requestAnimationFrame?a.requestAnimationFrame(t):a.setTimeout(t,0)}else n.emit("observerUpdate",e[0])}));i.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),n.observer.observers.push(i)},init:function(){var e=this;if(e.support.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),a=0;a<t.length;a+=1)e.observer.attach(t[a]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach((function(e){e.disconnect()})),this.observer.observers=[]}},I={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){M(this,{observer:t({},A,{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}};function O(e){var t=this,a=r(),n=o(),i=t.touchEventsData,s=t.params,l=t.touches;if(!t.animating||!s.preventInteractionOnTransition){var d=e;d.originalEvent&&(d=d.originalEvent);var c=m(d.target);if(("wrapper"!==s.touchEventsTarget||c.closest(t.wrapperEl).length)&&(i.isTouchEvent="touchstart"===d.type,(i.isTouchEvent||!("which"in d)||3!==d.which)&&!(!i.isTouchEvent&&"button"in d&&d.button>0||i.isTouched&&i.isMoved)))if(!!s.noSwipingClass&&""!==s.noSwipingClass&&d.target&&d.target.shadowRoot&&e.path&&e.path[0]&&(c=m(e.path[0])),s.noSwiping&&c.closest(s.noSwipingSelector?s.noSwipingSelector:"."+s.noSwipingClass)[0])t.allowClick=!0;else if(!s.swipeHandler||c.closest(s.swipeHandler)[0]){l.currentX="touchstart"===d.type?d.targetTouches[0].pageX:d.pageX,l.currentY="touchstart"===d.type?d.targetTouches[0].pageY:d.pageY;var u=l.currentX,p=l.currentY,f=s.edgeSwipeDetection||s.iOSEdgeSwipeDetection,h=s.edgeSwipeThreshold||s.iOSEdgeSwipeThreshold;if(!f||!(u<=h||u>=n.innerWidth-h)){if(C(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=u,l.startY=p,i.touchStartTime=S(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,s.threshold>0&&(i.allowThresholdMove=!1),"touchstart"!==d.type){var v=!0;c.is(i.formElements)&&(v=!1),a.activeElement&&m(a.activeElement).is(i.formElements)&&a.activeElement!==c[0]&&a.activeElement.blur();var g=v&&t.allowTouchMove&&s.touchStartPreventDefault;!s.touchStartForcePreventDefault&&!g||c[0].isContentEditable||d.preventDefault()}t.emit("touchStart",d)}}}}function $(e){var t=r(),a=this,n=a.touchEventsData,i=a.params,s=a.touches,o=a.rtlTranslate,l=e;if(l.originalEvent&&(l=l.originalEvent),n.isTouched){if(!n.isTouchEvent||"touchmove"===l.type){var d="touchmove"===l.type&&l.targetTouches&&(l.targetTouches[0]||l.changedTouches[0]),c="touchmove"===l.type?d.pageX:l.pageX,u="touchmove"===l.type?d.pageY:l.pageY;if(l.preventedByNestedSwiper)return s.startX=c,void(s.startY=u);if(!a.allowTouchMove)return a.allowClick=!1,void(n.isTouched&&(C(s,{startX:c,startY:u,currentX:c,currentY:u}),n.touchStartTime=S()));if(n.isTouchEvent&&i.touchReleaseOnEdges&&!i.loop)if(a.isVertical()){if(u<s.startY&&a.translate<=a.maxTranslate()||u>s.startY&&a.translate>=a.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(c<s.startX&&a.translate<=a.maxTranslate()||c>s.startX&&a.translate>=a.minTranslate())return;if(n.isTouchEvent&&t.activeElement&&l.target===t.activeElement&&m(l.target).is(n.formElements))return n.isMoved=!0,void(a.allowClick=!1);if(n.allowTouchCallbacks&&a.emit("touchMove",l),!(l.targetTouches&&l.targetTouches.length>1)){s.currentX=c,s.currentY=u;var p,f=s.currentX-s.startX,h=s.currentY-s.startY;if(!(a.params.threshold&&Math.sqrt(Math.pow(f,2)+Math.pow(h,2))<a.params.threshold))if(void 0===n.isScrolling&&(a.isHorizontal()&&s.currentY===s.startY||a.isVertical()&&s.currentX===s.startX?n.isScrolling=!1:f*f+h*h>=25&&(p=180*Math.atan2(Math.abs(h),Math.abs(f))/Math.PI,n.isScrolling=a.isHorizontal()?p>i.touchAngle:90-p>i.touchAngle)),n.isScrolling&&a.emit("touchMoveOpposite",l),void 0===n.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(n.startMoving=!0)),n.isScrolling)n.isTouched=!1;else if(n.startMoving){a.allowClick=!1,!i.cssMode&&l.cancelable&&l.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&l.stopPropagation(),n.isMoved||(i.loop&&a.loopFix(),n.startTranslate=a.getTranslate(),a.setTransition(0),a.animating&&a.$wrapperEl.trigger("webkitTransitionEnd transitionend"),n.allowMomentumBounce=!1,!i.grabCursor||!0!==a.allowSlideNext&&!0!==a.allowSlidePrev||a.setGrabCursor(!0),a.emit("sliderFirstMove",l)),a.emit("sliderMove",l),n.isMoved=!0;var v=a.isHorizontal()?f:h;s.diff=v,v*=i.touchRatio,o&&(v=-v),a.swipeDirection=v>0?"prev":"next",n.currentTranslate=v+n.startTranslate;var g=!0,y=i.resistanceRatio;if(i.touchReleaseOnEdges&&(y=0),v>0&&n.currentTranslate>a.minTranslate()?(g=!1,i.resistance&&(n.currentTranslate=a.minTranslate()-1+Math.pow(-a.minTranslate()+n.startTranslate+v,y))):v<0&&n.currentTranslate<a.maxTranslate()&&(g=!1,i.resistance&&(n.currentTranslate=a.maxTranslate()+1-Math.pow(a.maxTranslate()-n.startTranslate-v,y))),g&&(l.preventedByNestedSwiper=!0),!a.allowSlideNext&&"next"===a.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!a.allowSlidePrev&&"prev"===a.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),i.threshold>0){if(!(Math.abs(v)>i.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,n.currentTranslate=n.startTranslate,void(s.diff=a.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}i.followFinger&&!i.cssMode&&((i.freeMode||i.watchSlidesProgress||i.watchSlidesVisibility)&&(a.updateActiveIndex(),a.updateSlidesClasses()),i.freeMode&&(0===n.velocities.length&&n.velocities.push({position:s[a.isHorizontal()?"startX":"startY"],time:n.touchStartTime}),n.velocities.push({position:s[a.isHorizontal()?"currentX":"currentY"],time:S()})),a.updateProgress(n.currentTranslate),a.setTranslate(n.currentTranslate))}}}}else n.startMoving&&n.isScrolling&&a.emit("touchMoveOpposite",l)}function D(e){var t=this,a=t.touchEventsData,n=t.params,i=t.touches,r=t.rtlTranslate,s=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),a.allowTouchCallbacks&&t.emit("touchEnd",d),a.allowTouchCallbacks=!1,!a.isTouched)return a.isMoved&&n.grabCursor&&t.setGrabCursor(!1),a.isMoved=!1,void(a.startMoving=!1);n.grabCursor&&a.isMoved&&a.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var c,u=S(),p=u-a.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap click",d),p<300&&u-a.lastClickTime<300&&t.emit("doubleTap doubleClick",d)),a.lastClickTime=S(),E((function(){t.destroyed||(t.allowClick=!0)})),!a.isTouched||!a.isMoved||!t.swipeDirection||0===i.diff||a.currentTranslate===a.startTranslate)return a.isTouched=!1,a.isMoved=!1,void(a.startMoving=!1);if(a.isTouched=!1,a.isMoved=!1,a.startMoving=!1,c=n.followFinger?r?t.translate:-t.translate:-a.currentTranslate,!n.cssMode)if(n.freeMode){if(c<-t.minTranslate())return void t.slideTo(t.activeIndex);if(c>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(n.freeModeMomentum){if(a.velocities.length>1){var f=a.velocities.pop(),h=a.velocities.pop(),v=f.position-h.position,m=f.time-h.time;t.velocity=v/m,t.velocity/=2,Math.abs(t.velocity)<n.freeModeMinimumVelocity&&(t.velocity=0),(m>150||S()-f.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=n.freeModeMomentumVelocityRatio,a.velocities.length=0;var g=1e3*n.freeModeMomentumRatio,y=t.velocity*g,b=t.translate+y;r&&(b=-b);var w,x,T=!1,C=20*Math.abs(t.velocity)*n.freeModeMomentumBounceRatio;if(b<t.maxTranslate())n.freeModeMomentumBounce?(b+t.maxTranslate()<-C&&(b=t.maxTranslate()-C),w=t.maxTranslate(),T=!0,a.allowMomentumBounce=!0):b=t.maxTranslate(),n.loop&&n.centeredSlides&&(x=!0);else if(b>t.minTranslate())n.freeModeMomentumBounce?(b-t.minTranslate()>C&&(b=t.minTranslate()+C),w=t.minTranslate(),T=!0,a.allowMomentumBounce=!0):b=t.minTranslate(),n.loop&&n.centeredSlides&&(x=!0);else if(n.freeModeSticky){for(var M,L=0;L<l.length;L+=1)if(l[L]>-b){M=L;break}b=-(b=Math.abs(l[M]-b)<Math.abs(l[M-1]-b)||"next"===t.swipeDirection?l[M]:l[M-1])}if(x&&t.once("transitionEnd",(function(){t.loopFix()})),0!==t.velocity){if(g=r?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity),n.freeModeSticky){var k=Math.abs((r?-b:b)-t.translate),z=t.slidesSizesGrid[t.activeIndex];g=k<z?n.speed:k<2*z?1.5*n.speed:2.5*n.speed}}else if(n.freeModeSticky)return void t.slideToClosest();n.freeModeMomentumBounce&&T?(t.updateProgress(w),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating=!0,s.transitionEnd((function(){t&&!t.destroyed&&a.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(n.speed),setTimeout((function(){t.setTranslate(w),s.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(t.updateProgress(b),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,s.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}else if(n.freeModeSticky)return void t.slideToClosest();(!n.freeModeMomentum||p>=n.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var P=0,A=t.slidesSizesGrid[0],I=0;I<o.length;I+=I<n.slidesPerGroupSkip?1:n.slidesPerGroup){var O=I<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==o[I+O]?c>=o[I]&&c<o[I+O]&&(P=I,A=o[I+O]-o[I]):c>=o[I]&&(P=I,A=o[o.length-1]-o[o.length-2])}var $=(c-o[P])/A,D=P<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(p>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&($>=n.longSwipesRatio?t.slideTo(P+D):t.slideTo(P)),"prev"===t.swipeDirection&&($>1-n.longSwipesRatio?t.slideTo(P+D):t.slideTo(P))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||d.target!==t.navigation.nextEl&&d.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(P+D),"prev"===t.swipeDirection&&t.slideTo(P)):d.target===t.navigation.nextEl?t.slideTo(P+D):t.slideTo(P)}}}function N(){var e=this,t=e.params,a=e.el;if(!a||0!==a.offsetWidth){t.breakpoints&&e.setBreakpoint();var n=e.allowSlideNext,i=e.allowSlidePrev,r=e.snapGrid;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=i,e.allowSlideNext=n,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}}function H(e){var t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function B(){var e=this,t=e.wrapperEl,a=e.rtlTranslate;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=a?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();var n=e.maxTranslate()-e.minTranslate();(0===n?0:(e.translate-e.minTranslate())/n)!==e.progress&&e.updateProgress(a?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}var _=!1;function G(){}var R={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,nested:!1,width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1},V={modular:{useParams:function(e){var t=this;t.modules&&Object.keys(t.modules).forEach((function(a){var n=t.modules[a];n.params&&C(e,n.params)}))},useModules:function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach((function(a){var n=t.modules[a],i=e[a]||{};n.on&&t.on&&Object.keys(n.on).forEach((function(e){t.on(e,n.on[e])})),n.create&&n.create.bind(t)(i)}))}},eventsEmitter:{on:function(e,t,a){var n=this;if("function"!=typeof t)return n;var i=a?"unshift":"push";return e.split(" ").forEach((function(e){n.eventsListeners[e]||(n.eventsListeners[e]=[]),n.eventsListeners[e][i](t)})),n},once:function(e,t,a){var n=this;if("function"!=typeof t)return n;function i(){n.off(e,i),i.__emitterProxy&&delete i.__emitterProxy;for(var a=arguments.length,r=new Array(a),s=0;s<a;s++)r[s]=arguments[s];t.apply(n,r)}return i.__emitterProxy=t,n.on(e,i,a)},onAny:function(e,t){var a=this;if("function"!=typeof e)return a;var n=t?"unshift":"push";return a.eventsAnyListeners.indexOf(e)<0&&a.eventsAnyListeners[n](e),a},offAny:function(e){var t=this;if(!t.eventsAnyListeners)return t;var a=t.eventsAnyListeners.indexOf(e);return a>=0&&t.eventsAnyListeners.splice(a,1),t},off:function(e,t){var a=this;return a.eventsListeners?(e.split(" ").forEach((function(e){void 0===t?a.eventsListeners[e]=[]:a.eventsListeners[e]&&a.eventsListeners[e].forEach((function(n,i){(n===t||n.__emitterProxy&&n.__emitterProxy===t)&&a.eventsListeners[e].splice(i,1)}))})),a):a},emit:function(){var e,t,a,n=this;if(!n.eventsListeners)return n;for(var i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];"string"==typeof r[0]||Array.isArray(r[0])?(e=r[0],t=r.slice(1,r.length),a=n):(e=r[0].events,t=r[0].data,a=r[0].context||n),t.unshift(a);var o=Array.isArray(e)?e:e.split(" ");return o.forEach((function(e){n.eventsAnyListeners&&n.eventsAnyListeners.length&&n.eventsAnyListeners.forEach((function(n){n.apply(a,[e].concat(t))})),n.eventsListeners&&n.eventsListeners[e]&&n.eventsListeners[e].forEach((function(e){e.apply(a,t)}))})),n}},update:{updateSize:function(){var e,t,a=this,n=a.$el;e=void 0!==a.params.width&&null!==a.params.width?a.params.width:n[0].clientWidth,t=void 0!==a.params.height&&null!==a.params.height?a.params.height:n[0].clientHeight,0===e&&a.isHorizontal()||0===t&&a.isVertical()||(e=e-parseInt(n.css("padding-left")||0,10)-parseInt(n.css("padding-right")||0,10),t=t-parseInt(n.css("padding-top")||0,10)-parseInt(n.css("padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(t)&&(t=0),C(a,{width:e,height:t,size:a.isHorizontal()?e:t}))},updateSlides:function(){var e=this,t=o(),a=e.params,n=e.$wrapperEl,i=e.size,r=e.rtlTranslate,s=e.wrongRTL,l=e.virtual&&a.virtual.enabled,d=l?e.virtual.slides.length:e.slides.length,c=n.children("."+e.params.slideClass),u=l?e.virtual.slides.length:c.length,p=[],f=[],h=[];function v(e,t){return!a.cssMode||t!==c.length-1}var m=a.slidesOffsetBefore;"function"==typeof m&&(m=a.slidesOffsetBefore.call(e));var g=a.slidesOffsetAfter;"function"==typeof g&&(g=a.slidesOffsetAfter.call(e));var y=e.snapGrid.length,b=e.slidesGrid.length,w=a.spaceBetween,E=-m,S=0,x=0;if(void 0!==i){var T,M;"string"==typeof w&&w.indexOf("%")>=0&&(w=parseFloat(w.replace("%",""))/100*i),e.virtualSize=-w,r?c.css({marginLeft:"",marginTop:""}):c.css({marginRight:"",marginBottom:""}),a.slidesPerColumn>1&&(T=Math.floor(u/a.slidesPerColumn)===u/e.params.slidesPerColumn?u:Math.ceil(u/a.slidesPerColumn)*a.slidesPerColumn,"auto"!==a.slidesPerView&&"row"===a.slidesPerColumnFill&&(T=Math.max(T,a.slidesPerView*a.slidesPerColumn)));for(var L,k=a.slidesPerColumn,z=T/k,P=Math.floor(u/a.slidesPerColumn),A=0;A<u;A+=1){M=0;var I=c.eq(A);if(a.slidesPerColumn>1){var O=void 0,$=void 0,D=void 0;if("row"===a.slidesPerColumnFill&&a.slidesPerGroup>1){var N=Math.floor(A/(a.slidesPerGroup*a.slidesPerColumn)),H=A-a.slidesPerColumn*a.slidesPerGroup*N,B=0===N?a.slidesPerGroup:Math.min(Math.ceil((u-N*k*a.slidesPerGroup)/k),a.slidesPerGroup);O=($=H-(D=Math.floor(H/B))*B+N*a.slidesPerGroup)+D*T/k,I.css({"-webkit-box-ordinal-group":O,"-moz-box-ordinal-group":O,"-ms-flex-order":O,"-webkit-order":O,order:O})}else"column"===a.slidesPerColumnFill?(D=A-($=Math.floor(A/k))*k,($>P||$===P&&D===k-1)&&(D+=1)>=k&&(D=0,$+=1)):$=A-(D=Math.floor(A/z))*z;I.css("margin-"+(e.isHorizontal()?"top":"left"),0!==D&&a.spaceBetween&&a.spaceBetween+"px")}if("none"!==I.css("display")){if("auto"===a.slidesPerView){var _=t.getComputedStyle(I[0],null),G=I[0].style.transform,R=I[0].style.webkitTransform;if(G&&(I[0].style.transform="none"),R&&(I[0].style.webkitTransform="none"),a.roundLengths)M=e.isHorizontal()?I.outerWidth(!0):I.outerHeight(!0);else if(e.isHorizontal()){var V=parseFloat(_.getPropertyValue("width")||0),Y=parseFloat(_.getPropertyValue("padding-left")||0),X=parseFloat(_.getPropertyValue("padding-right")||0),F=parseFloat(_.getPropertyValue("margin-left")||0),q=parseFloat(_.getPropertyValue("margin-right")||0),j=_.getPropertyValue("box-sizing");if(j&&"border-box"===j)M=V+F+q;else{var W=I[0],U=W.clientWidth;M=V+Y+X+F+q+(W.offsetWidth-U)}}else{var K=parseFloat(_.getPropertyValue("height")||0),Q=parseFloat(_.getPropertyValue("padding-top")||0),Z=parseFloat(_.getPropertyValue("padding-bottom")||0),J=parseFloat(_.getPropertyValue("margin-top")||0),ee=parseFloat(_.getPropertyValue("margin-bottom")||0),te=_.getPropertyValue("box-sizing");if(te&&"border-box"===te)M=K+J+ee;else{var ae=I[0],ne=ae.clientHeight;M=K+Q+Z+J+ee+(ae.offsetHeight-ne)}}G&&(I[0].style.transform=G),R&&(I[0].style.webkitTransform=R),a.roundLengths&&(M=Math.floor(M))}else M=(i-(a.slidesPerView-1)*w)/a.slidesPerView,a.roundLengths&&(M=Math.floor(M)),c[A]&&(e.isHorizontal()?c[A].style.width=M+"px":c[A].style.height=M+"px");c[A]&&(c[A].swiperSlideSize=M),h.push(M),a.centeredSlides?(E=E+M/2+S/2+w,0===S&&0!==A&&(E=E-i/2-w),0===A&&(E=E-i/2-w),Math.abs(E)<.001&&(E=0),a.roundLengths&&(E=Math.floor(E)),x%a.slidesPerGroup==0&&p.push(E),f.push(E)):(a.roundLengths&&(E=Math.floor(E)),(x-Math.min(e.params.slidesPerGroupSkip,x))%e.params.slidesPerGroup==0&&p.push(E),f.push(E),E=E+M+w),e.virtualSize+=M+w,S=M,x+=1}}if(e.virtualSize=Math.max(e.virtualSize,i)+g,r&&s&&("slide"===a.effect||"coverflow"===a.effect)&&n.css({width:e.virtualSize+a.spaceBetween+"px"}),a.setWrapperSize&&(e.isHorizontal()?n.css({width:e.virtualSize+a.spaceBetween+"px"}):n.css({height:e.virtualSize+a.spaceBetween+"px"})),a.slidesPerColumn>1&&(e.virtualSize=(M+a.spaceBetween)*T,e.virtualSize=Math.ceil(e.virtualSize/a.slidesPerColumn)-a.spaceBetween,e.isHorizontal()?n.css({width:e.virtualSize+a.spaceBetween+"px"}):n.css({height:e.virtualSize+a.spaceBetween+"px"}),a.centeredSlides)){L=[];for(var ie=0;ie<p.length;ie+=1){var re=p[ie];a.roundLengths&&(re=Math.floor(re)),p[ie]<e.virtualSize+p[0]&&L.push(re)}p=L}if(!a.centeredSlides){L=[];for(var se=0;se<p.length;se+=1){var oe=p[se];a.roundLengths&&(oe=Math.floor(oe)),p[se]<=e.virtualSize-i&&L.push(oe)}p=L,Math.floor(e.virtualSize-i)-Math.floor(p[p.length-1])>1&&p.push(e.virtualSize-i)}if(0===p.length&&(p=[0]),0!==a.spaceBetween&&(e.isHorizontal()?r?c.filter(v).css({marginLeft:w+"px"}):c.filter(v).css({marginRight:w+"px"}):c.filter(v).css({marginBottom:w+"px"})),a.centeredSlides&&a.centeredSlidesBounds){var le=0;h.forEach((function(e){le+=e+(a.spaceBetween?a.spaceBetween:0)}));var de=(le-=a.spaceBetween)-i;p=p.map((function(e){return e<0?-m:e>de?de+g:e}))}if(a.centerInsufficientSlides){var ce=0;if(h.forEach((function(e){ce+=e+(a.spaceBetween?a.spaceBetween:0)})),(ce-=a.spaceBetween)<i){var ue=(i-ce)/2;p.forEach((function(e,t){p[t]=e-ue})),f.forEach((function(e,t){f[t]=e+ue}))}}C(e,{slides:c,snapGrid:p,slidesGrid:f,slidesSizesGrid:h}),u!==d&&e.emit("slidesLengthChange"),p.length!==y&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),f.length!==b&&e.emit("slidesGridLengthChange"),(a.watchSlidesProgress||a.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,a=this,n=[],i=0;if("number"==typeof e?a.setTransition(e):!0===e&&a.setTransition(a.params.speed),"auto"!==a.params.slidesPerView&&a.params.slidesPerView>1)if(a.params.centeredSlides)a.visibleSlides.each((function(e){n.push(e)}));else for(t=0;t<Math.ceil(a.params.slidesPerView);t+=1){var r=a.activeIndex+t;if(r>a.slides.length)break;n.push(a.slides.eq(r)[0])}else n.push(a.slides.eq(a.activeIndex)[0]);for(t=0;t<n.length;t+=1)if(void 0!==n[t]){var s=n[t].offsetHeight;i=s>i?s:i}i&&a.$wrapperEl.css("height",i+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,a=t.params,n=t.slides,i=t.rtlTranslate;if(0!==n.length){void 0===n[0].swiperSlideOffset&&t.updateSlidesOffset();var r=-e;i&&(r=e),n.removeClass(a.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var s=0;s<n.length;s+=1){var o=n[s],l=(r+(a.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+a.spaceBetween);if(a.watchSlidesVisibility||a.centeredSlides&&a.autoHeight){var d=-(r-o.swiperSlideOffset),c=d+t.slidesSizesGrid[s];(d>=0&&d<t.size-1||c>1&&c<=t.size||d<=0&&c>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(s),n.eq(s).addClass(a.slideVisibleClass))}o.progress=i?-l:l}t.visibleSlides=m(t.visibleSlides)}},updateProgress:function(e){var t=this;if(void 0===e){var a=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*a||0}var n=t.params,i=t.maxTranslate()-t.minTranslate(),r=t.progress,s=t.isBeginning,o=t.isEnd,l=s,d=o;0===i?(r=0,s=!0,o=!0):(s=(r=(e-t.minTranslate())/i)<=0,o=r>=1),C(t,{progress:r,isBeginning:s,isEnd:o}),(n.watchSlidesProgress||n.watchSlidesVisibility||n.centeredSlides&&n.autoHeight)&&t.updateSlidesProgress(e),s&&!l&&t.emit("reachBeginning toEdge"),o&&!d&&t.emit("reachEnd toEdge"),(l&&!s||d&&!o)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){var e,t=this,a=t.slides,n=t.params,i=t.$wrapperEl,r=t.activeIndex,s=t.realIndex,o=t.virtual&&n.virtual.enabled;a.removeClass(n.slideActiveClass+" "+n.slideNextClass+" "+n.slidePrevClass+" "+n.slideDuplicateActiveClass+" "+n.slideDuplicateNextClass+" "+n.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find("."+n.slideClass+'[data-swiper-slide-index="'+r+'"]'):a.eq(r)).addClass(n.slideActiveClass),n.loop&&(e.hasClass(n.slideDuplicateClass)?i.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+s+'"]').addClass(n.slideDuplicateActiveClass):i.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+s+'"]').addClass(n.slideDuplicateActiveClass));var l=e.nextAll("."+n.slideClass).eq(0).addClass(n.slideNextClass);n.loop&&0===l.length&&(l=a.eq(0)).addClass(n.slideNextClass);var d=e.prevAll("."+n.slideClass).eq(0).addClass(n.slidePrevClass);n.loop&&0===d.length&&(d=a.eq(-1)).addClass(n.slidePrevClass),n.loop&&(l.hasClass(n.slideDuplicateClass)?i.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicateNextClass):i.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicateNextClass),d.hasClass(n.slideDuplicateClass)?i.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicatePrevClass):i.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicatePrevClass)),t.emitSlidesClasses()},updateActiveIndex:function(e){var t,a=this,n=a.rtlTranslate?a.translate:-a.translate,i=a.slidesGrid,r=a.snapGrid,s=a.params,o=a.activeIndex,l=a.realIndex,d=a.snapIndex,c=e;if(void 0===c){for(var u=0;u<i.length;u+=1)void 0!==i[u+1]?n>=i[u]&&n<i[u+1]-(i[u+1]-i[u])/2?c=u:n>=i[u]&&n<i[u+1]&&(c=u+1):n>=i[u]&&(c=u);s.normalizeSlideIndex&&(c<0||void 0===c)&&(c=0)}if(r.indexOf(n)>=0)t=r.indexOf(n);else{var p=Math.min(s.slidesPerGroupSkip,c);t=p+Math.floor((c-p)/s.slidesPerGroup)}if(t>=r.length&&(t=r.length-1),c!==o){var f=parseInt(a.slides.eq(c).attr("data-swiper-slide-index")||c,10);C(a,{snapIndex:t,realIndex:f,previousIndex:o,activeIndex:c}),a.emit("activeIndexChange"),a.emit("snapIndexChange"),l!==f&&a.emit("realIndexChange"),(a.initialized||a.params.runCallbacksOnInit)&&a.emit("slideChange")}else t!==d&&(a.snapIndex=t,a.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,a=t.params,n=m(e.target).closest("."+a.slideClass)[0],i=!1;if(n)for(var r=0;r<t.slides.length;r+=1)t.slides[r]===n&&(i=!0);if(!n||!i)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=n,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(m(n).attr("data-swiper-slide-index"),10):t.clickedIndex=m(n).index(),a.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this,a=t.params,n=t.rtlTranslate,i=t.translate,r=t.$wrapperEl;if(a.virtualTranslate)return n?-i:i;if(a.cssMode)return i;var s=x(r[0],e);return n&&(s=-s),s||0},setTranslate:function(e,t){var a=this,n=a.rtlTranslate,i=a.params,r=a.$wrapperEl,s=a.wrapperEl,o=a.progress,l=0,d=0;a.isHorizontal()?l=n?-e:e:d=e,i.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),i.cssMode?s[a.isHorizontal()?"scrollLeft":"scrollTop"]=a.isHorizontal()?-l:-d:i.virtualTranslate||r.transform("translate3d("+l+"px, "+d+"px, 0px)"),a.previousTranslate=a.translate,a.translate=a.isHorizontal()?l:d;var c=a.maxTranslate()-a.minTranslate();(0===c?0:(e-a.minTranslate())/c)!==o&&a.updateProgress(e),a.emit("setTranslate",a.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,a,n,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),void 0===n&&(n=!0);var r=this,s=r.params,o=r.wrapperEl;if(r.animating&&s.preventInteractionOnTransition)return!1;var l,d=r.minTranslate(),c=r.maxTranslate();if(l=n&&e>d?d:n&&e<c?c:e,r.updateProgress(l),s.cssMode){var u,p=r.isHorizontal();return 0===t?o[p?"scrollLeft":"scrollTop"]=-l:o.scrollTo?o.scrollTo(((u={})[p?"left":"top"]=-l,u.behavior="smooth",u)):o[p?"scrollLeft":"scrollTop"]=-l,!0}return 0===t?(r.setTransition(0),r.setTranslate(l),a&&(r.emit("beforeTransitionStart",t,i),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(l),a&&(r.emit("beforeTransitionStart",t,i),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,a&&r.emit("transitionEnd"))}),r.$wrapperEl[0].addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){var a=this;a.params.cssMode||a.$wrapperEl.transition(e),a.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var a=this,n=a.activeIndex,i=a.params,r=a.previousIndex;if(!i.cssMode){i.autoHeight&&a.updateAutoHeight();var s=t;if(s||(s=n>r?"next":n<r?"prev":"reset"),a.emit("transitionStart"),e&&n!==r){if("reset"===s)return void a.emit("slideResetTransitionStart");a.emit("slideChangeTransitionStart"),"next"===s?a.emit("slideNextTransitionStart"):a.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var a=this,n=a.activeIndex,i=a.previousIndex,r=a.params;if(a.animating=!1,!r.cssMode){a.setTransition(0);var s=t;if(s||(s=n>i?"next":n<i?"prev":"reset"),a.emit("transitionEnd"),e&&n!==i){if("reset"===s)return void a.emit("slideResetTransitionEnd");a.emit("slideChangeTransitionEnd"),"next"===s?a.emit("slideNextTransitionEnd"):a.emit("slidePrevTransitionEnd")}}}},slide:{slideTo:function(e,t,a,n){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),"number"!=typeof e&&"string"!=typeof e)throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. ["+_typeof(e)+"] given.");if("string"==typeof e){var i=parseInt(e,10);if(!isFinite(i))throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. ["+e+"] given.");e=i}var r=this,s=e;s<0&&(s=0);var o=r.params,l=r.snapGrid,d=r.slidesGrid,c=r.previousIndex,u=r.activeIndex,p=r.rtlTranslate,f=r.wrapperEl;if(r.animating&&o.preventInteractionOnTransition)return!1;var h=Math.min(r.params.slidesPerGroupSkip,s),v=h+Math.floor((s-h)/r.params.slidesPerGroup);v>=l.length&&(v=l.length-1),(u||o.initialSlide||0)===(c||0)&&a&&r.emit("beforeSlideChangeStart");var m,g=-l[v];if(r.updateProgress(g),o.normalizeSlideIndex)for(var y=0;y<d.length;y+=1)-Math.floor(100*g)>=Math.floor(100*d[y])&&(s=y);if(r.initialized&&s!==u){if(!r.allowSlideNext&&g<r.translate&&g<r.minTranslate())return!1;if(!r.allowSlidePrev&&g>r.translate&&g>r.maxTranslate()&&(u||0)!==s)return!1}if(m=s>u?"next":s<u?"prev":"reset",p&&-g===r.translate||!p&&g===r.translate)return r.updateActiveIndex(s),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==o.effect&&r.setTranslate(g),"reset"!==m&&(r.transitionStart(a,m),r.transitionEnd(a,m)),!1;if(o.cssMode){var b,w=r.isHorizontal(),E=-g;return p&&(E=f.scrollWidth-f.offsetWidth-E),0===t?f[w?"scrollLeft":"scrollTop"]=E:f.scrollTo?f.scrollTo(((b={})[w?"left":"top"]=E,b.behavior="smooth",b)):f[w?"scrollLeft":"scrollTop"]=E,!0}return 0===t?(r.setTransition(0),r.setTranslate(g),r.updateActiveIndex(s),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,n),r.transitionStart(a,m),r.transitionEnd(a,m)):(r.setTransition(t),r.setTranslate(g),r.updateActiveIndex(s),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,n),r.transitionStart(a,m),r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(a,m))}),r.$wrapperEl[0].addEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,a,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0);var i=this,r=e;return i.params.loop&&(r+=i.loopedSlides),i.slideTo(r,t,a,n)},slideNext:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,i=n.params,r=n.animating,s=n.activeIndex<i.slidesPerGroupSkip?1:i.slidesPerGroup;if(i.loop){if(r&&i.loopPreventsSlide)return!1;n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft}return n.slideTo(n.activeIndex+s,e,t,a)},slidePrev:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,i=n.params,r=n.animating,s=n.snapGrid,o=n.slidesGrid,l=n.rtlTranslate;if(i.loop){if(r&&i.loopPreventsSlide)return!1;n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var c,u=d(l?n.translate:-n.translate),p=s.map((function(e){return d(e)})),f=(s[p.indexOf(u)],s[p.indexOf(u)-1]);return void 0===f&&i.cssMode&&s.forEach((function(e){!f&&u>=e&&(f=e)})),void 0!==f&&(c=o.indexOf(f))<0&&(c=n.activeIndex-1),n.slideTo(c,e,t,a)},slideReset:function(e,t,a){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,a)},slideToClosest:function(e,t,a,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===n&&(n=.5);var i=this,r=i.activeIndex,s=Math.min(i.params.slidesPerGroupSkip,r),o=s+Math.floor((r-s)/i.params.slidesPerGroup),l=i.rtlTranslate?i.translate:-i.translate;if(l>=i.snapGrid[o]){var d=i.snapGrid[o];l-d>(i.snapGrid[o+1]-d)*n&&(r+=i.params.slidesPerGroup)}else{var c=i.snapGrid[o-1];l-c<=(i.snapGrid[o]-c)*n&&(r-=i.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,i.slidesGrid.length-1),i.slideTo(r,e,t,a)},slideToClickedSlide:function(){var e,t=this,a=t.params,n=t.$wrapperEl,i="auto"===a.slidesPerView?t.slidesPerViewDynamic():a.slidesPerView,r=t.clickedIndex;if(a.loop){if(t.animating)return;e=parseInt(m(t.clickedSlide).attr("data-swiper-slide-index"),10),a.centeredSlides?r<t.loopedSlides-i/2||r>t.slides.length-t.loopedSlides+i/2?(t.loopFix(),r=n.children("."+a.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+a.slideDuplicateClass+")").eq(0).index(),E((function(){t.slideTo(r)}))):t.slideTo(r):r>t.slides.length-i?(t.loopFix(),r=n.children("."+a.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+a.slideDuplicateClass+")").eq(0).index(),E((function(){t.slideTo(r)}))):t.slideTo(r)}else t.slideTo(r)}},loop:{loopCreate:function(){var e=this,t=r(),a=e.params,n=e.$wrapperEl;n.children("."+a.slideClass+"."+a.slideDuplicateClass).remove();var i=n.children("."+a.slideClass);if(a.loopFillGroupWithBlank){var s=a.slidesPerGroup-i.length%a.slidesPerGroup;if(s!==a.slidesPerGroup){for(var o=0;o<s;o+=1){var l=m(t.createElement("div")).addClass(a.slideClass+" "+a.slideBlankClass);n.append(l)}i=n.children("."+a.slideClass)}}"auto"!==a.slidesPerView||a.loopedSlides||(a.loopedSlides=i.length),e.loopedSlides=Math.ceil(parseFloat(a.loopedSlides||a.slidesPerView,10)),e.loopedSlides+=a.loopAdditionalSlides,e.loopedSlides>i.length&&(e.loopedSlides=i.length);var d=[],c=[];i.each((function(t,a){var n=m(t);a<e.loopedSlides&&c.push(t),a<i.length&&a>=i.length-e.loopedSlides&&d.push(t),n.attr("data-swiper-slide-index",a)}));for(var u=0;u<c.length;u+=1)n.append(m(c[u].cloneNode(!0)).addClass(a.slideDuplicateClass));for(var p=d.length-1;p>=0;p-=1)n.prepend(m(d[p].cloneNode(!0)).addClass(a.slideDuplicateClass))},loopFix:function(){var e=this;e.emit("beforeLoopFix");var t,a=e.activeIndex,n=e.slides,i=e.loopedSlides,r=e.allowSlidePrev,s=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var d=-o[a]-e.getTranslate();a<i?(t=n.length-3*i+a,t+=i,e.slideTo(t,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d)):a>=n.length-i&&(t=-n.length+a+i,t+=i,e.slideTo(t,0,!1,!0)&&0!==d&&e.setTranslate((l?-e.translate:e.translate)-d)),e.allowSlidePrev=r,e.allowSlideNext=s,e.emit("loopFix")},loopDestroy:function(){var e=this,t=e.$wrapperEl,a=e.params,n=e.slides;t.children("."+a.slideClass+"."+a.slideDuplicateClass+",."+a.slideClass+"."+a.slideBlankClass).remove(),n.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(e){var t=this;if(!(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)){var a=t.el;a.style.cursor="move",a.style.cursor=e?"-webkit-grabbing":"-webkit-grab",a.style.cursor=e?"-moz-grabbin":"-moz-grab",a.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.el.style.cursor="")}},manipulation:{appendSlide:function(e){var t=this,a=t.$wrapperEl,n=t.params;if(n.loop&&t.loopDestroy(),"object"==_typeof(e)&&"length"in e)for(var i=0;i<e.length;i+=1)e[i]&&a.append(e[i]);else a.append(e);n.loop&&t.loopCreate(),n.observer&&t.support.observer||t.update()},prependSlide:function(e){var t=this,a=t.params,n=t.$wrapperEl,i=t.activeIndex;a.loop&&t.loopDestroy();var r=i+1;if("object"==_typeof(e)&&"length"in e){for(var s=0;s<e.length;s+=1)e[s]&&n.prepend(e[s]);r=i+e.length}else n.prepend(e);a.loop&&t.loopCreate(),a.observer&&t.support.observer||t.update(),t.slideTo(r,0,!1)},addSlide:function(e,t){var a=this,n=a.$wrapperEl,i=a.params,r=a.activeIndex;i.loop&&(r-=a.loopedSlides,a.loopDestroy(),a.slides=n.children("."+i.slideClass));var s=a.slides.length;if(e<=0)a.prependSlide(t);else if(e>=s)a.appendSlide(t);else{for(var o=r>e?r+1:r,l=[],d=s-1;d>=e;d-=1){var c=a.slides.eq(d);c.remove(),l.unshift(c)}if("object"==_typeof(t)&&"length"in t){for(var u=0;u<t.length;u+=1)t[u]&&n.append(t[u]);o=r>e?r+t.length:r}else n.append(t);for(var p=0;p<l.length;p+=1)n.append(l[p]);i.loop&&a.loopCreate(),i.observer&&a.support.observer||a.update(),i.loop?a.slideTo(o+a.loopedSlides,0,!1):a.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,a=t.params,n=t.$wrapperEl,i=t.activeIndex;a.loop&&(i-=t.loopedSlides,t.loopDestroy(),t.slides=n.children("."+a.slideClass));var r,s=i;if("object"==_typeof(e)&&"length"in e){for(var o=0;o<e.length;o+=1)r=e[o],t.slides[r]&&t.slides.eq(r).remove(),r<s&&(s-=1);s=Math.max(s,0)}else r=e,t.slides[r]&&t.slides.eq(r).remove(),r<s&&(s-=1),s=Math.max(s,0);a.loop&&t.loopCreate(),a.observer&&t.support.observer||t.update(),a.loop?t.slideTo(s+t.loopedSlides,0,!1):t.slideTo(s,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},events:{attachEvents:function(){var e=this,t=r(),a=e.params,n=e.touchEvents,i=e.el,s=e.wrapperEl,o=e.device,l=e.support;e.onTouchStart=O.bind(e),e.onTouchMove=$.bind(e),e.onTouchEnd=D.bind(e),a.cssMode&&(e.onScroll=B.bind(e)),e.onClick=H.bind(e);var d=!!a.nested;if(!l.touch&&l.pointerEvents)i.addEventListener(n.start,e.onTouchStart,!1),t.addEventListener(n.move,e.onTouchMove,d),t.addEventListener(n.end,e.onTouchEnd,!1);else{if(l.touch){var c=!("touchstart"!==n.start||!l.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};i.addEventListener(n.start,e.onTouchStart,c),i.addEventListener(n.move,e.onTouchMove,l.passiveListener?{passive:!1,capture:d}:d),i.addEventListener(n.end,e.onTouchEnd,c),n.cancel&&i.addEventListener(n.cancel,e.onTouchEnd,c),_||(t.addEventListener("touchstart",G),_=!0)}(a.simulateTouch&&!o.ios&&!o.android||a.simulateTouch&&!l.touch&&o.ios)&&(i.addEventListener("mousedown",e.onTouchStart,!1),t.addEventListener("mousemove",e.onTouchMove,d),t.addEventListener("mouseup",e.onTouchEnd,!1))}(a.preventClicks||a.preventClicksPropagation)&&i.addEventListener("click",e.onClick,!0),a.cssMode&&s.addEventListener("scroll",e.onScroll),a.updateOnWindowResize?e.on(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",N,!0):e.on("observerUpdate",N,!0)},detachEvents:function(){var e=this,t=r(),a=e.params,n=e.touchEvents,i=e.el,s=e.wrapperEl,o=e.device,l=e.support,d=!!a.nested;if(!l.touch&&l.pointerEvents)i.removeEventListener(n.start,e.onTouchStart,!1),t.removeEventListener(n.move,e.onTouchMove,d),t.removeEventListener(n.end,e.onTouchEnd,!1);else{if(l.touch){var c=!("onTouchStart"!==n.start||!l.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};i.removeEventListener(n.start,e.onTouchStart,c),i.removeEventListener(n.move,e.onTouchMove,d),i.removeEventListener(n.end,e.onTouchEnd,c),n.cancel&&i.removeEventListener(n.cancel,e.onTouchEnd,c)}(a.simulateTouch&&!o.ios&&!o.android||a.simulateTouch&&!l.touch&&o.ios)&&(i.removeEventListener("mousedown",e.onTouchStart,!1),t.removeEventListener("mousemove",e.onTouchMove,d),t.removeEventListener("mouseup",e.onTouchEnd,!1))}(a.preventClicks||a.preventClicksPropagation)&&i.removeEventListener("click",e.onClick,!0),a.cssMode&&s.removeEventListener("scroll",e.onScroll),e.off(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",N)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,a=e.initialized,n=e.loopedSlides,i=void 0===n?0:n,r=e.params,s=e.$el,o=r.breakpoints;if(o&&(!o||0!==Object.keys(o).length)){var l=e.getBreakpoint(o);if(l&&e.currentBreakpoint!==l){var d=l in o?o[l]:void 0;d&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach((function(e){var t=d[e];void 0!==t&&(d[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}));var c=d||e.originalParams,u=r.slidesPerColumn>1,p=c.slidesPerColumn>1;u&&!p?(s.removeClass(r.containerModifierClass+"multirow "+r.containerModifierClass+"multirow-column"),e.emitContainerClasses()):!u&&p&&(s.addClass(r.containerModifierClass+"multirow"),"column"===c.slidesPerColumnFill&&s.addClass(r.containerModifierClass+"multirow-column"),e.emitContainerClasses());var f=c.direction&&c.direction!==r.direction,h=r.loop&&(c.slidesPerView!==r.slidesPerView||f);f&&a&&e.changeDirection(),C(e.params,c),C(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=l,e.emit("_beforeBreakpoint",c),h&&a&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-i+e.loopedSlides,0,!1)),e.emit("breakpoint",c)}}},getBreakpoint:function(e){var t=o();if(e){var a=!1,n=Object.keys(e).map((function(e){if("string"==typeof e&&0===e.indexOf("@")){var a=parseFloat(e.substr(1));return{value:t.innerHeight*a,point:e}}return{value:e,point:e}}));n.sort((function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)}));for(var i=0;i<n.length;i+=1){var r=n[i],s=r.point;r.value<=t.innerWidth&&(a=s)}return a||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.params,a=e.isLocked,n=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&n?e.isLocked=n<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,a!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),a&&a!==e.isLocked&&(e.isEnd=!1,e.navigation&&e.navigation.update())}},classes:{addClasses:function(){var e=this,t=e.classNames,a=e.params,n=e.rtl,i=e.$el,r=e.device,s=[];s.push("initialized"),s.push(a.direction),a.freeMode&&s.push("free-mode"),a.autoHeight&&s.push("autoheight"),n&&s.push("rtl"),a.slidesPerColumn>1&&(s.push("multirow"),"column"===a.slidesPerColumnFill&&s.push("multirow-column")),r.android&&s.push("android"),r.ios&&s.push("ios"),a.cssMode&&s.push("css-mode"),s.forEach((function(e){t.push(a.containerModifierClass+e)})),i.addClass(t.join(" ")),e.emitContainerClasses()},removeClasses:function(){var e=this,t=e.$el,a=e.classNames;t.removeClass(a.join(" ")),e.emitContainerClasses()}},images:{loadImage:function(e,t,a,n,i,r){var s,l=o();function d(){r&&r()}m(e).parent("picture")[0]||e.complete&&i?d():t?((s=new l.Image).onload=d,s.onerror=d,n&&(s.sizes=n),a&&(s.srcset=a),t&&(s.src=t)):d()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var a=0;a<e.imagesToLoad.length;a+=1){var n=e.imagesToLoad[a];e.loadImage(n,n.currentSrc||n.getAttribute("src"),n.srcset||n.getAttribute("srcset"),n.sizes||n.getAttribute("sizes"),!0,t)}}}},Y={},X=function(){function t(){for(var e,a,n=arguments.length,i=new Array(n),r=0;r<n;r++)i[r]=arguments[r];1===i.length&&i[0].constructor&&i[0].constructor===Object?a=i[0]:(e=i[0],a=i[1]),a||(a={}),a=C({},a),e&&!a.el&&(a.el=e);var s=this;s.support=L(),s.device=k({userAgent:a.userAgent}),s.browser=z(),s.eventsListeners={},s.eventsAnyListeners=[],void 0===s.modules&&(s.modules={}),Object.keys(s.modules).forEach((function(e){var t=s.modules[e];if(t.params){var n=Object.keys(t.params)[0],i=t.params[n];if("object"!=_typeof(i)||null===i)return;if(!(n in a)||!("enabled"in i))return;!0===a[n]&&(a[n]={enabled:!0}),"object"!=_typeof(a[n])||"enabled"in a[n]||(a[n].enabled=!0),a[n]||(a[n]={enabled:!1})}}));var o=C({},R);s.useParams(o),s.params=C({},o,Y,a),s.originalParams=C({},s.params),s.passedParams=C({},a),s.params&&s.params.on&&Object.keys(s.params.on).forEach((function(e){s.on(e,s.params.on[e])})),s.params&&s.params.onAny&&s.onAny(s.params.onAny),s.$=m;var l=m(s.params.el);if(e=l[0]){if(l.length>1){var d=[];return l.each((function(e){var n=C({},a,{el:e});d.push(new t(n))})),d}var c,u,p;return e.swiper=s,e&&e.shadowRoot&&e.shadowRoot.querySelector?(c=m(e.shadowRoot.querySelector("."+s.params.wrapperClass))).children=function(e){return l.children(e)}:c=l.children("."+s.params.wrapperClass),C(s,{$el:l,el:e,$wrapperEl:c,wrapperEl:c[0],classNames:[],slides:m(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===s.params.direction},isVertical:function(){return"vertical"===s.params.direction},rtl:"rtl"===e.dir.toLowerCase()||"rtl"===l.css("direction"),rtlTranslate:"horizontal"===s.params.direction&&("rtl"===e.dir.toLowerCase()||"rtl"===l.css("direction")),wrongRTL:"-webkit-box"===c.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:s.params.allowSlideNext,allowSlidePrev:s.params.allowSlidePrev,touchEvents:(u=["touchstart","touchmove","touchend","touchcancel"],p=["mousedown","mousemove","mouseup"],s.support.pointerEvents&&(p=["pointerdown","pointermove","pointerup"]),s.touchEventsTouch={start:u[0],move:u[1],end:u[2],cancel:u[3]},s.touchEventsDesktop={start:p[0],move:p[1],end:p[2]},s.support.touch||!s.params.simulateTouch?s.touchEventsTouch:s.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:S(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:s.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),s.useModules(),s.emit("_swiper"),s.params.init&&s.init(),s}}var a,n,i=t.prototype;return i.emitContainerClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=e.el.className.split(" ").filter((function(t){return 0===t.indexOf("swiper-container")||0===t.indexOf(e.params.containerModifierClass)}));e.emit("_containerClasses",t.join(" "))}},i.getSlideClasses=function(e){var t=this;return e.className.split(" ").filter((function(e){return 0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)})).join(" ")},i.emitSlidesClasses=function(){var e=this;e.params._emitClasses&&e.el&&e.slides.each((function(t){var a=e.getSlideClasses(t);e.emit("_slideClass",t,a)}))},i.slidesPerViewDynamic=function(){var e=this,t=e.params,a=e.slides,n=e.slidesGrid,i=e.size,r=e.activeIndex,s=1;if(t.centeredSlides){for(var o,l=a[r].swiperSlideSize,d=r+1;d<a.length;d+=1)a[d]&&!o&&(s+=1,(l+=a[d].swiperSlideSize)>i&&(o=!0));for(var c=r-1;c>=0;c-=1)a[c]&&!o&&(s+=1,(l+=a[c].swiperSlideSize)>i&&(o=!0))}else for(var u=r+1;u<a.length;u+=1)n[u]-n[r]<i&&(s+=1);return s},i.update=function(){var e=this;if(e&&!e.destroyed){var t=e.snapGrid,a=e.params;a.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(n(),e.params.autoHeight&&e.updateAutoHeight()):(("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||n(),a.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}function n(){var t=e.rtlTranslate?-1*e.translate:e.translate,a=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(a),e.updateActiveIndex(),e.updateSlidesClasses()}},i.changeDirection=function(e,t){void 0===t&&(t=!0);var a=this,n=a.params.direction;return e||(e="horizontal"===n?"vertical":"horizontal"),e===n||"horizontal"!==e&&"vertical"!==e||(a.$el.removeClass(""+a.params.containerModifierClass+n).addClass(""+a.params.containerModifierClass+e),a.emitContainerClasses(),a.params.direction=e,a.slides.each((function(t){"vertical"===e?t.style.width="":t.style.height=""})),a.emit("changeDirection"),t&&a.update()),a},i.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"),e.emit("afterInit"))},i.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var a,n=this,i=n.params,r=n.$el,s=n.$wrapperEl,o=n.slides;return void 0===n.params||n.destroyed||(n.emit("beforeDestroy"),n.initialized=!1,n.detachEvents(),i.loop&&n.loopDestroy(),t&&(n.removeClasses(),r.removeAttr("style"),s.removeAttr("style"),o&&o.length&&o.removeClass([i.slideVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),n.emit("destroy"),Object.keys(n.eventsListeners).forEach((function(e){n.off(e)})),!1!==e&&(n.$el[0].swiper=null,a=n,Object.keys(a).forEach((function(e){try{a[e]=null}catch(e){}try{delete a[e]}catch(e){}}))),n.destroyed=!0),null},t.extendDefaults=function(e){C(Y,e)},t.installModule=function(e){t.prototype.modules||(t.prototype.modules={});var a=e.name||Object.keys(t.prototype.modules).length+"_"+S();t.prototype.modules[a]=e},t.use=function(e){return Array.isArray(e)?(e.forEach((function(e){return t.installModule(e)})),t):(t.installModule(e),t)},a=t,n=[{key:"extendedDefaults",get:function(){return Y}},{key:"defaults",get:function(){return R}}],null&&e(a.prototype,null),n&&e(a,n),t}();Object.keys(V).forEach((function(e){Object.keys(V[e]).forEach((function(t){X.prototype[t]=V[e][t]}))})),X.use([P,I]);var F={update:function(e){var t=this,a=t.params,n=a.slidesPerView,i=a.slidesPerGroup,r=a.centeredSlides,s=t.params.virtual,o=s.addSlidesBefore,l=s.addSlidesAfter,d=t.virtual,c=d.from,u=d.to,p=d.slides,f=d.slidesGrid,h=d.renderSlide,v=d.offset;t.updateActiveIndex();var m,g,y,b=t.activeIndex||0;m=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",r?(g=Math.floor(n/2)+i+l,y=Math.floor(n/2)+i+o):(g=n+(i-1)+l,y=i+o);var w=Math.max((b||0)-y,0),E=Math.min((b||0)+g,p.length-1),S=(t.slidesGrid[w]||0)-(t.slidesGrid[0]||0);function x(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(C(t.virtual,{from:w,to:E,offset:S,slidesGrid:t.slidesGrid}),c===w&&u===E&&!e)return t.slidesGrid!==f&&S!==v&&t.slides.css(m,S+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:S,from:w,to:E,slides:function(){for(var e=[],t=w;t<=E;t+=1)e.push(p[t]);return e}()}),void(t.params.virtual.renderExternalUpdate&&x());var T=[],M=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var L=c;L<=u;L+=1)(L<w||L>E)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+L+'"]').remove();for(var k=0;k<p.length;k+=1)k>=w&&k<=E&&(void 0===u||e?M.push(k):(k>u&&M.push(k),k<c&&T.push(k)));M.forEach((function(e){t.$wrapperEl.append(h(p[e],e))})),T.sort((function(e,t){return t-e})).forEach((function(e){t.$wrapperEl.prepend(h(p[e],e))})),t.$wrapperEl.children(".swiper-slide").css(m,S+"px"),x()},renderSlide:function(e,t){var a=this,n=a.params.virtual;if(n.cache&&a.virtual.cache[t])return a.virtual.cache[t];var i=n.renderSlide?m(n.renderSlide.call(a,e,t)):m('<div class="'+a.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return i.attr("data-swiper-slide-index")||i.attr("data-swiper-slide-index",t),n.cache&&(a.virtual.cache[t]=i),i},appendSlide:function(e){var t=this;if("object"==_typeof(e)&&"length"in e)for(var a=0;a<e.length;a+=1)e[a]&&t.virtual.slides.push(e[a]);else t.virtual.slides.push(e);t.virtual.update(!0)},prependSlide:function(e){var t=this,a=t.activeIndex,n=a+1,i=1;if(Array.isArray(e)){for(var r=0;r<e.length;r+=1)e[r]&&t.virtual.slides.unshift(e[r]);n=a+e.length,i=e.length}else t.virtual.slides.unshift(e);if(t.params.virtual.cache){var s=t.virtual.cache,o={};Object.keys(s).forEach((function(e){var t=s[e],a=t.attr("data-swiper-slide-index");a&&t.attr("data-swiper-slide-index",parseInt(a,10)+1),o[parseInt(e,10)+i]=t})),t.virtual.cache=o}t.virtual.update(!0),t.slideTo(n,0)},removeSlide:function(e){var t=this;if(null!=e){var a=t.activeIndex;if(Array.isArray(e))for(var n=e.length-1;n>=0;n-=1)t.virtual.slides.splice(e[n],1),t.params.virtual.cache&&delete t.virtual.cache[e[n]],e[n]<a&&(a-=1),a=Math.max(a,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<a&&(a-=1),a=Math.max(a,0);t.virtual.update(!0),t.slideTo(a,0)}},removeAllSlides:function(){var e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}},q={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}},create:function(){M(this,{virtual:t({},F,{slides:this.params.virtual.slides,cache:{}})})},on:{beforeInit:function(e){if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+"virtual");var t={watchSlidesProgress:!0};C(e.params,t),C(e.originalParams,t),e.params.initialSlide||e.virtual.update()}},setTranslate:function(e){e.params.virtual.enabled&&e.virtual.update()}}},j={handle:function(e){var t=this,a=o(),n=r(),i=t.rtlTranslate,s=e;s.originalEvent&&(s=s.originalEvent);var l=s.keyCode||s.charCode,d=t.params.keyboard.pageUpDown,c=d&&33===l,u=d&&34===l,p=37===l,f=39===l,h=38===l,v=40===l;if(!t.allowSlideNext&&(t.isHorizontal()&&f||t.isVertical()&&v||u))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&p||t.isVertical()&&h||c))return!1;if(!(s.shiftKey||s.altKey||s.ctrlKey||s.metaKey||n.activeElement&&n.activeElement.nodeName&&("input"===n.activeElement.nodeName.toLowerCase()||"textarea"===n.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(c||u||p||f||h||v)){var m=!1;if(t.$el.parents("."+t.params.slideClass).length>0&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var g=a.innerWidth,y=a.innerHeight,b=t.$el.offset();i&&(b.left-=t.$el[0].scrollLeft);for(var w=[[b.left,b.top],[b.left+t.width,b.top],[b.left,b.top+t.height],[b.left+t.width,b.top+t.height]],E=0;E<w.length;E+=1){var S=w[E];if(S[0]>=0&&S[0]<=g&&S[1]>=0&&S[1]<=y){if(0===S[0]&&0===S[1])continue;m=!0}}if(!m)return}t.isHorizontal()?((c||u||p||f)&&(s.preventDefault?s.preventDefault():s.returnValue=!1),((u||f)&&!i||(c||p)&&i)&&t.slideNext(),((c||p)&&!i||(u||f)&&i)&&t.slidePrev()):((c||u||h||v)&&(s.preventDefault?s.preventDefault():s.returnValue=!1),(u||v)&&t.slideNext(),(c||h)&&t.slidePrev()),t.emit("keyPress",l)}},enable:function(){var e=this,t=r();e.keyboard.enabled||(m(t).on("keydown",e.keyboard.handle),e.keyboard.enabled=!0)},disable:function(){var e=this,t=r();e.keyboard.enabled&&(m(t).off("keydown",e.keyboard.handle),e.keyboard.enabled=!1)}},W={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}},create:function(){M(this,{keyboard:t({enabled:!1},j)})},on:{init:function(e){e.params.keyboard.enabled&&e.keyboard.enable()},destroy:function(e){e.keyboard.enabled&&e.keyboard.disable()}}},U={lastScrollTime:S(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return o().navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e=r(),t="onwheel",a=t in e;if(!a){var n=e.createElement("div");n.setAttribute(t,"return;"),a="function"==typeof n.onwheel}return!a&&e.implementation&&e.implementation.hasFeature&&!0!==e.implementation.hasFeature("","")&&(a=e.implementation.hasFeature("Events.wheel","3.0")),a}()?"wheel":"mousewheel"},normalize:function(e){var t=0,a=0,n=0,i=0;return"detail"in e&&(a=e.detail),"wheelDelta"in e&&(a=-e.wheelDelta/120),"wheelDeltaY"in e&&(a=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=a,a=0),n=10*t,i=10*a,"deltaY"in e&&(i=e.deltaY),"deltaX"in e&&(n=e.deltaX),e.shiftKey&&!n&&(n=i,i=0),(n||i)&&e.deltaMode&&(1===e.deltaMode?(n*=40,i*=40):(n*=800,i*=800)),n&&!t&&(t=n<1?-1:1),i&&!a&&(a=i<1?-1:1),{spinX:t,spinY:a,pixelX:n,pixelY:i}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,a=this,n=a.params.mousewheel;a.params.cssMode&&t.preventDefault();var i=a.$el;if("container"!==a.params.mousewheel.eventsTarget&&(i=m(a.params.mousewheel.eventsTarget)),!a.mouseEntered&&!i[0].contains(t.target)&&!n.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var r=0,s=a.rtlTranslate?-1:1,o=U.normalize(t);if(n.forceToAxis)if(a.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;r=-o.pixelX*s}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;r=-o.pixelY}else r=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*s:-o.pixelY;if(0===r)return!0;n.invert&&(r=-r);var l=a.getTranslate()+r*n.sensitivity;if(l>=a.minTranslate()&&(l=a.minTranslate()),l<=a.maxTranslate()&&(l=a.maxTranslate()),(!!a.params.loop||!(l===a.minTranslate()||l===a.maxTranslate()))&&a.params.nested&&t.stopPropagation(),a.params.freeMode){var d={time:S(),delta:Math.abs(r),direction:Math.sign(r)},c=a.mousewheel.lastEventBeforeSnap,u=c&&d.time<c.time+500&&d.delta<=c.delta&&d.direction===c.direction;if(!u){a.mousewheel.lastEventBeforeSnap=void 0,a.params.loop&&a.loopFix();var p=a.getTranslate()+r*n.sensitivity,f=a.isBeginning,h=a.isEnd;if(p>=a.minTranslate()&&(p=a.minTranslate()),p<=a.maxTranslate()&&(p=a.maxTranslate()),a.setTransition(0),a.setTranslate(p),a.updateProgress(),a.updateActiveIndex(),a.updateSlidesClasses(),(!f&&a.isBeginning||!h&&a.isEnd)&&a.updateSlidesClasses(),a.params.freeModeSticky){clearTimeout(a.mousewheel.timeout),a.mousewheel.timeout=void 0;var v=a.mousewheel.recentWheelEvents;v.length>=15&&v.shift();var g=v.length?v[v.length-1]:void 0,y=v[0];if(v.push(d),g&&(d.delta>g.delta||d.direction!==g.direction))v.splice(0);else if(v.length>=15&&d.time-y.time<500&&y.delta-d.delta>=1&&d.delta<=6){var b=r>0?.8:.2;a.mousewheel.lastEventBeforeSnap=d,v.splice(0),a.mousewheel.timeout=E((function(){a.slideToClosest(a.params.speed,!0,void 0,b)}),0)}a.mousewheel.timeout||(a.mousewheel.timeout=E((function(){a.mousewheel.lastEventBeforeSnap=d,v.splice(0),a.slideToClosest(a.params.speed,!0,void 0,.5)}),500))}if(u||a.emit("scroll",t),a.params.autoplay&&a.params.autoplayDisableOnInteraction&&a.autoplay.stop(),p===a.minTranslate()||p===a.maxTranslate())return!0}}else{var w={time:S(),delta:Math.abs(r),direction:Math.sign(r),raw:e},x=a.mousewheel.recentWheelEvents;x.length>=2&&x.shift();var T=x.length?x[x.length-1]:void 0;if(x.push(w),T?(w.direction!==T.direction||w.delta>T.delta||w.time>T.time+150)&&a.mousewheel.animateSlider(w):a.mousewheel.animateSlider(w),a.mousewheel.releaseScroll(w))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){var t=this,a=o();return!(this.params.mousewheel.thresholdDelta&&e.delta<this.params.mousewheel.thresholdDelta||this.params.mousewheel.thresholdTime&&S()-t.mousewheel.lastScrollTime<this.params.mousewheel.thresholdTime||!(e.delta>=6&&S()-t.mousewheel.lastScrollTime<60)&&(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit("scroll",e.raw)),t.mousewheel.lastScrollTime=(new a.Date).getTime(),1))},releaseScroll:function(e){var t=this,a=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&a.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&a.releaseOnEdges)return!0;return!1},enable:function(){var e=this,t=U.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;var a=e.$el;return"container"!==e.params.mousewheel.eventsTarget&&(a=m(e.params.mousewheel.eventsTarget)),a.on("mouseenter",e.mousewheel.handleMouseEnter),a.on("mouseleave",e.mousewheel.handleMouseLeave),a.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable:function(){var e=this,t=U.event();if(e.params.cssMode)return e.wrapperEl.addEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(!e.mousewheel.enabled)return!1;var a=e.$el;return"container"!==e.params.mousewheel.eventsTarget&&(a=m(e.params.mousewheel.eventsTarget)),a.off(t,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}},K={update:function(){var e=this,t=e.params.navigation;if(!e.params.loop){var a=e.navigation,n=a.$nextEl,i=a.$prevEl;i&&i.length>0&&(e.isBeginning?i.addClass(t.disabledClass):i.removeClass(t.disabledClass),i[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),n&&n.length>0&&(e.isEnd?n.addClass(t.disabledClass):n.removeClass(t.disabledClass),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))}},onPrevClick:function(e){var t=this;e.preventDefault(),t.isBeginning&&!t.params.loop||t.slidePrev()},onNextClick:function(e){var t=this;e.preventDefault(),t.isEnd&&!t.params.loop||t.slideNext()},init:function(){var e,t,a=this,n=a.params.navigation;(n.nextEl||n.prevEl)&&(n.nextEl&&(e=m(n.nextEl),a.params.uniqueNavElements&&"string"==typeof n.nextEl&&e.length>1&&1===a.$el.find(n.nextEl).length&&(e=a.$el.find(n.nextEl))),n.prevEl&&(t=m(n.prevEl),a.params.uniqueNavElements&&"string"==typeof n.prevEl&&t.length>1&&1===a.$el.find(n.prevEl).length&&(t=a.$el.find(n.prevEl))),e&&e.length>0&&e.on("click",a.navigation.onNextClick),t&&t.length>0&&t.on("click",a.navigation.onPrevClick),C(a.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,a=t.$nextEl,n=t.$prevEl;a&&a.length&&(a.off("click",e.navigation.onNextClick),a.removeClass(e.params.navigation.disabledClass)),n&&n.length&&(n.off("click",e.navigation.onPrevClick),n.removeClass(e.params.navigation.disabledClass))}},Q={update:function(){var e=this,t=e.rtl,a=e.params.pagination;if(a.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var n,i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,r=e.pagination.$el,s=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((n=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>i-1-2*e.loopedSlides&&(n-=i-2*e.loopedSlides),n>s-1&&(n-=s),n<0&&"bullets"!==e.params.paginationType&&(n=s+n)):n=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===a.type&&e.pagination.bullets&&e.pagination.bullets.length>0){var o,l,d,c=e.pagination.bullets;if(a.dynamicBullets&&(e.pagination.bulletSize=c.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),r.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(a.dynamicMainBullets+4)+"px"),a.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=n-e.previousIndex,e.pagination.dynamicBulletIndex>a.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=a.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),o=n-e.pagination.dynamicBulletIndex,d=((l=o+(Math.min(c.length,a.dynamicMainBullets)-1))+o)/2),c.removeClass(a.bulletActiveClass+" "+a.bulletActiveClass+"-next "+a.bulletActiveClass+"-next-next "+a.bulletActiveClass+"-prev "+a.bulletActiveClass+"-prev-prev "+a.bulletActiveClass+"-main"),r.length>1)c.each((function(e){var t=m(e),i=t.index();i===n&&t.addClass(a.bulletActiveClass),a.dynamicBullets&&(i>=o&&i<=l&&t.addClass(a.bulletActiveClass+"-main"),i===o&&t.prev().addClass(a.bulletActiveClass+"-prev").prev().addClass(a.bulletActiveClass+"-prev-prev"),i===l&&t.next().addClass(a.bulletActiveClass+"-next").next().addClass(a.bulletActiveClass+"-next-next"))}));else{var u=c.eq(n),p=u.index();if(u.addClass(a.bulletActiveClass),a.dynamicBullets){for(var f=c.eq(o),h=c.eq(l),v=o;v<=l;v+=1)c.eq(v).addClass(a.bulletActiveClass+"-main");if(e.params.loop)if(p>=c.length-a.dynamicMainBullets){for(var g=a.dynamicMainBullets;g>=0;g-=1)c.eq(c.length-g).addClass(a.bulletActiveClass+"-main");c.eq(c.length-a.dynamicMainBullets-1).addClass(a.bulletActiveClass+"-prev")}else f.prev().addClass(a.bulletActiveClass+"-prev").prev().addClass(a.bulletActiveClass+"-prev-prev"),h.next().addClass(a.bulletActiveClass+"-next").next().addClass(a.bulletActiveClass+"-next-next");else f.prev().addClass(a.bulletActiveClass+"-prev").prev().addClass(a.bulletActiveClass+"-prev-prev"),h.next().addClass(a.bulletActiveClass+"-next").next().addClass(a.bulletActiveClass+"-next-next")}}if(a.dynamicBullets){var y=Math.min(c.length,a.dynamicMainBullets+4),b=(e.pagination.bulletSize*y-e.pagination.bulletSize)/2-d*e.pagination.bulletSize,w=t?"right":"left";c.css(e.isHorizontal()?w:"top",b+"px")}}if("fraction"===a.type&&(r.find("."+a.currentClass).text(a.formatFractionCurrent(n+1)),r.find("."+a.totalClass).text(a.formatFractionTotal(s))),"progressbar"===a.type){var E;E=a.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";var S=(n+1)/s,x=1,T=1;"horizontal"===E?x=S:T=S,r.find("."+a.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+x+") scaleY("+T+")").transition(e.params.speed)}"custom"===a.type&&a.renderCustom?(r.html(a.renderCustom(e,n+1,s)),e.emit("paginationRender",r[0])):e.emit("paginationUpdate",r[0]),r[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](a.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,n=e.pagination.$el,i="";if("bullets"===t.type){for(var r=e.params.loop?Math.ceil((a-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,s=0;s<r;s+=1)t.renderBullet?i+=t.renderBullet.call(e,s,t.bulletClass):i+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";n.html(i),e.pagination.bullets=n.find("."+t.bulletClass.replace(/ /g,"."))}"fraction"===t.type&&(i=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',n.html(i)),"progressbar"===t.type&&(i=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',n.html(i)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var e=this,t=e.params.pagination;if(t.el){var a=m(t.el);0!==a.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&a.length>1&&(a=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&a.addClass(t.clickableClass),a.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(a.addClass(""+t.modifierClass+t.type+"-dynamic"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&a.addClass(t.progressbarOppositeClass),t.clickable&&a.on("click","."+t.bulletClass.replace(/ /g,"."),(function(t){t.preventDefault();var a=m(this).index()*e.params.slidesPerGroup;e.params.loop&&(a+=e.loopedSlides),e.slideTo(a)})),C(e.pagination,{$el:a,el:a[0]}))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a=e.pagination.$el;a.removeClass(t.hiddenClass),a.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&a.off("click","."+t.bulletClass.replace(/ /g,"."))}}},Z={setTranslate:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,a=e.rtlTranslate,n=e.progress,i=t.dragSize,r=t.trackSize,s=t.$dragEl,o=t.$el,l=e.params.scrollbar,d=i,c=(r-i)*n;a?(c=-c)>0?(d=i-c,c=0):-c+i>r&&(d=r+c):c<0?(d=i+c,c=0):c+i>r&&(d=r-c),e.isHorizontal()?(s.transform("translate3d("+c+"px, 0, 0)"),s[0].style.width=d+"px"):(s.transform("translate3d(0px, "+c+"px, 0)"),s[0].style.height=d+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout((function(){o[0].style.opacity=0,o.transition(400)}),1e3))}},setTransition:function(e){var t=this;t.params.scrollbar.el&&t.scrollbar.el&&t.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,a=t.$dragEl,n=t.$el;a[0].style.width="",a[0].style.height="";var i,r=e.isHorizontal()?n[0].offsetWidth:n[0].offsetHeight,s=e.size/e.virtualSize,o=s*(r/e.size);i="auto"===e.params.scrollbar.dragSize?r*s:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?a[0].style.width=i+"px":a[0].style.height=i+"px",n[0].style.display=s>=1?"none":"",e.params.scrollbar.hide&&(n[0].style.opacity=0),C(t,{trackSize:r,divider:s,moveDivider:o,dragSize:i}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)}},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t,a=this,n=a.scrollbar,i=a.rtlTranslate,r=n.$el,s=n.dragSize,o=n.trackSize,l=n.dragStartPos;t=(n.getPointerPosition(e)-r.offset()[a.isHorizontal()?"left":"top"]-(null!==l?l:s/2))/(o-s),t=Math.max(Math.min(t,1),0),i&&(t=1-t);var d=a.minTranslate()+(a.maxTranslate()-a.minTranslate())*t;a.updateProgress(d),a.setTranslate(d),a.updateActiveIndex(),a.updateSlidesClasses()},onDragStart:function(e){var t=this,a=t.params.scrollbar,n=t.scrollbar,i=t.$wrapperEl,r=n.$el,s=n.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===s[0]||e.target===s?n.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),i.transition(100),s.transition(100),n.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),r.transition(0),a.hide&&r.css("opacity",1),t.params.cssMode&&t.$wrapperEl.css("scroll-snap-type","none"),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this,a=t.scrollbar,n=t.$wrapperEl,i=a.$el,r=a.$dragEl;t.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,a.setDragPosition(e),n.transition(0),i.transition(0),r.transition(0),t.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,a=t.params.scrollbar,n=t.scrollbar,i=t.$wrapperEl,r=n.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css("scroll-snap-type",""),i.transition("")),a.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=E((function(){r.css("opacity",0),r.transition(400)}),1e3)),t.emit("scrollbarDragEnd",e),a.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=r(),a=e.scrollbar,n=e.touchEventsTouch,i=e.touchEventsDesktop,s=e.params,o=e.support,l=a.$el[0],d=!(!o.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},c=!(!o.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};o.touch?(l.addEventListener(n.start,e.scrollbar.onDragStart,d),l.addEventListener(n.move,e.scrollbar.onDragMove,d),l.addEventListener(n.end,e.scrollbar.onDragEnd,c)):(l.addEventListener(i.start,e.scrollbar.onDragStart,d),t.addEventListener(i.move,e.scrollbar.onDragMove,d),t.addEventListener(i.end,e.scrollbar.onDragEnd,c))}},disableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=r(),a=e.scrollbar,n=e.touchEventsTouch,i=e.touchEventsDesktop,s=e.params,o=e.support,l=a.$el[0],d=!(!o.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},c=!(!o.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};o.touch?(l.removeEventListener(n.start,e.scrollbar.onDragStart,d),l.removeEventListener(n.move,e.scrollbar.onDragMove,d),l.removeEventListener(n.end,e.scrollbar.onDragEnd,c)):(l.removeEventListener(i.start,e.scrollbar.onDragStart,d),t.removeEventListener(i.move,e.scrollbar.onDragMove,d),t.removeEventListener(i.end,e.scrollbar.onDragEnd,c))}},init:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,a=e.$el,n=e.params.scrollbar,i=m(n.el);e.params.uniqueNavElements&&"string"==typeof n.el&&i.length>1&&1===a.find(n.el).length&&(i=a.find(n.el));var r=i.find("."+e.params.scrollbar.dragClass);0===r.length&&(r=m('<div class="'+e.params.scrollbar.dragClass+'"></div>'),i.append(r)),C(t,{$el:i,el:i[0],$dragEl:r,dragEl:r[0]}),n.draggable&&t.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},J={setTransform:function(e,t){var a=this.rtl,n=m(e),i=a?-1:1,r=n.attr("data-swiper-parallax")||"0",s=n.attr("data-swiper-parallax-x"),o=n.attr("data-swiper-parallax-y"),l=n.attr("data-swiper-parallax-scale"),d=n.attr("data-swiper-parallax-opacity");if(s||o?(s=s||"0",o=o||"0"):this.isHorizontal()?(s=r,o="0"):(o=r,s="0"),s=s.indexOf("%")>=0?parseInt(s,10)*t*i+"%":s*t*i+"px",o=o.indexOf("%")>=0?parseInt(o,10)*t+"%":o*t+"px",null!=d){var c=d-(d-1)*(1-Math.abs(t));n[0].style.opacity=c}if(null==l)n.transform("translate3d("+s+", "+o+", 0px)");else{var u=l-(l-1)*(1-Math.abs(t));n.transform("translate3d("+s+", "+o+", 0px) scale("+u+")")}},setTranslate:function(){var e=this,t=e.$el,a=e.slides,n=e.progress,i=e.snapGrid;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){e.parallax.setTransform(t,n)})),a.each((function(t,a){var r=t.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(r+=Math.ceil(a/2)-n*(i.length-1)),r=Math.min(Math.max(r,-1),1),m(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){e.parallax.setTransform(t,r)}))}))},setTransition:function(e){void 0===e&&(e=this.params.speed),this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){var a=m(t),n=parseInt(a.attr("data-swiper-parallax-duration"),10)||e;0===e&&(n=0),a.transition(n)}))}},ee={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,a=e.targetTouches[0].pageY,n=e.targetTouches[1].pageX,i=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(n-t,2)+Math.pow(i-a,2))},onGestureStart:function(e){var t=this,a=t.support,n=t.params.zoom,i=t.zoom,r=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!a.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,r.scaleStart=ee.getDistanceBetweenTouches(e)}r.$slideEl&&r.$slideEl.length||(r.$slideEl=m(e.target).closest("."+t.params.slideClass),0===r.$slideEl.length&&(r.$slideEl=t.slides.eq(t.activeIndex)),r.$imageEl=r.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),r.$imageWrapEl=r.$imageEl.parent("."+n.containerClass),r.maxRatio=r.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,0!==r.$imageWrapEl.length)?(r.$imageEl&&r.$imageEl.transition(0),t.zoom.isScaling=!0):r.$imageEl=void 0},onGestureChange:function(e){var t=this,a=t.support,n=t.params.zoom,i=t.zoom,r=i.gesture;if(!a.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,r.scaleMove=ee.getDistanceBetweenTouches(e)}r.$imageEl&&0!==r.$imageEl.length?(a.gestures?i.scale=e.scale*i.currentScale:i.scale=r.scaleMove/r.scaleStart*i.currentScale,i.scale>r.maxRatio&&(i.scale=r.maxRatio-1+Math.pow(i.scale-r.maxRatio+1,.5)),i.scale<n.minRatio&&(i.scale=n.minRatio+1-Math.pow(n.minRatio-i.scale+1,.5)),r.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")")):"gesturechange"===e.type&&i.onGestureStart(e)},onGestureEnd:function(e){var t=this,a=t.device,n=t.support,i=t.params.zoom,r=t.zoom,s=r.gesture;if(!n.gestures){if(!r.fakeGestureTouched||!r.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!a.android)return;r.fakeGestureTouched=!1,r.fakeGestureMoved=!1}s.$imageEl&&0!==s.$imageEl.length&&(r.scale=Math.max(Math.min(r.scale,s.maxRatio),i.minRatio),s.$imageEl.transition(t.params.speed).transform("translate3d(0,0,0) scale("+r.scale+")"),r.currentScale=r.scale,r.isScaling=!1,1===r.scale&&(s.$slideEl=void 0))},onTouchStart:function(e){var t=this.device,a=this.zoom,n=a.gesture,i=a.image;n.$imageEl&&0!==n.$imageEl.length&&(i.isTouched||(t.android&&e.cancelable&&e.preventDefault(),i.isTouched=!0,i.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,i.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,a=t.zoom,n=a.gesture,i=a.image,r=a.velocity;if(n.$imageEl&&0!==n.$imageEl.length&&(t.allowClick=!1,i.isTouched&&n.$slideEl)){i.isMoved||(i.width=n.$imageEl[0].offsetWidth,i.height=n.$imageEl[0].offsetHeight,i.startX=x(n.$imageWrapEl[0],"x")||0,i.startY=x(n.$imageWrapEl[0],"y")||0,n.slideWidth=n.$slideEl[0].offsetWidth,n.slideHeight=n.$slideEl[0].offsetHeight,n.$imageWrapEl.transition(0),t.rtl&&(i.startX=-i.startX,i.startY=-i.startY));var s=i.width*a.scale,o=i.height*a.scale;if(!(s<n.slideWidth&&o<n.slideHeight)){if(i.minX=Math.min(n.slideWidth/2-s/2,0),i.maxX=-i.minX,i.minY=Math.min(n.slideHeight/2-o/2,0),i.maxY=-i.minY,i.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,i.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!i.isMoved&&!a.isScaling){if(t.isHorizontal()&&(Math.floor(i.minX)===Math.floor(i.startX)&&i.touchesCurrent.x<i.touchesStart.x||Math.floor(i.maxX)===Math.floor(i.startX)&&i.touchesCurrent.x>i.touchesStart.x))return void(i.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(i.minY)===Math.floor(i.startY)&&i.touchesCurrent.y<i.touchesStart.y||Math.floor(i.maxY)===Math.floor(i.startY)&&i.touchesCurrent.y>i.touchesStart.y))return void(i.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),i.isMoved=!0,i.currentX=i.touchesCurrent.x-i.touchesStart.x+i.startX,i.currentY=i.touchesCurrent.y-i.touchesStart.y+i.startY,i.currentX<i.minX&&(i.currentX=i.minX+1-Math.pow(i.minX-i.currentX+1,.8)),i.currentX>i.maxX&&(i.currentX=i.maxX-1+Math.pow(i.currentX-i.maxX+1,.8)),i.currentY<i.minY&&(i.currentY=i.minY+1-Math.pow(i.minY-i.currentY+1,.8)),i.currentY>i.maxY&&(i.currentY=i.maxY-1+Math.pow(i.currentY-i.maxY+1,.8)),r.prevPositionX||(r.prevPositionX=i.touchesCurrent.x),r.prevPositionY||(r.prevPositionY=i.touchesCurrent.y),r.prevTime||(r.prevTime=Date.now()),r.x=(i.touchesCurrent.x-r.prevPositionX)/(Date.now()-r.prevTime)/2,r.y=(i.touchesCurrent.y-r.prevPositionY)/(Date.now()-r.prevTime)/2,Math.abs(i.touchesCurrent.x-r.prevPositionX)<2&&(r.x=0),Math.abs(i.touchesCurrent.y-r.prevPositionY)<2&&(r.y=0),r.prevPositionX=i.touchesCurrent.x,r.prevPositionY=i.touchesCurrent.y,r.prevTime=Date.now(),n.$imageWrapEl.transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,a=e.image,n=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!a.isTouched||!a.isMoved)return a.isTouched=!1,void(a.isMoved=!1);a.isTouched=!1,a.isMoved=!1;var i=300,r=300,s=n.x*i,o=a.currentX+s,l=n.y*r,d=a.currentY+l;0!==n.x&&(i=Math.abs((o-a.currentX)/n.x)),0!==n.y&&(r=Math.abs((d-a.currentY)/n.y));var c=Math.max(i,r);a.currentX=o,a.currentY=d;var u=a.width*e.scale,p=a.height*e.scale;a.minX=Math.min(t.slideWidth/2-u/2,0),a.maxX=-a.minX,a.minY=Math.min(t.slideHeight/2-p/2,0),a.maxY=-a.minY,a.currentX=Math.max(Math.min(a.currentX,a.maxX),a.minX),a.currentY=Math.max(Math.min(a.currentY,a.maxY),a.minY),t.$imageWrapEl.transition(c).transform("translate3d("+a.currentX+"px, "+a.currentY+"px,0)")}},onTransitionEnd:function(){var e=this,t=e.zoom,a=t.gesture;a.$slideEl&&e.previousIndex!==e.activeIndex&&(a.$imageEl&&a.$imageEl.transform("translate3d(0,0,0) scale(1)"),a.$imageWrapEl&&a.$imageWrapEl.transform("translate3d(0,0,0)"),t.scale=1,t.currentScale=1,a.$slideEl=void 0,a.$imageEl=void 0,a.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,a,n,i,r,s,o,l,d,c,u,p,f,h,v,m,g=this,y=g.zoom,b=g.params.zoom,w=y.gesture,E=y.image;w.$slideEl||(g.params.virtual&&g.params.virtual.enabled&&g.virtual?w.$slideEl=g.$wrapperEl.children("."+g.params.slideActiveClass):w.$slideEl=g.slides.eq(g.activeIndex),w.$imageEl=w.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),w.$imageWrapEl=w.$imageEl.parent("."+b.containerClass)),w.$imageEl&&0!==w.$imageEl.length&&(w.$slideEl.addClass(""+b.zoomedSlideClass),void 0===E.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,a="touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=E.touchesStart.x,a=E.touchesStart.y),y.scale=w.$imageWrapEl.attr("data-swiper-zoom")||b.maxRatio,y.currentScale=w.$imageWrapEl.attr("data-swiper-zoom")||b.maxRatio,e?(v=w.$slideEl[0].offsetWidth,m=w.$slideEl[0].offsetHeight,n=w.$slideEl.offset().left+v/2-t,i=w.$slideEl.offset().top+m/2-a,o=w.$imageEl[0].offsetWidth,l=w.$imageEl[0].offsetHeight,d=o*y.scale,c=l*y.scale,f=-(u=Math.min(v/2-d/2,0)),h=-(p=Math.min(m/2-c/2,0)),(r=n*y.scale)<u&&(r=u),r>f&&(r=f),(s=i*y.scale)<p&&(s=p),s>h&&(s=h)):(r=0,s=0),w.$imageWrapEl.transition(300).transform("translate3d("+r+"px, "+s+"px,0)"),w.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+y.scale+")"))},out:function(){var e=this,t=e.zoom,a=e.params.zoom,n=t.gesture;n.$slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?n.$slideEl=e.$wrapperEl.children("."+e.params.slideActiveClass):n.$slideEl=e.slides.eq(e.activeIndex),n.$imageEl=n.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),n.$imageWrapEl=n.$imageEl.parent("."+a.containerClass)),n.$imageEl&&0!==n.$imageEl.length&&(t.scale=1,t.currentScale=1,n.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),n.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),n.$slideEl.removeClass(""+a.zoomedSlideClass),n.$slideEl=void 0)},toggleGestures:function(e){var t=this,a=t.zoom,n=a.slideSelector,i=a.passiveListener;t.$wrapperEl[e]("gesturestart",n,a.onGestureStart,i),t.$wrapperEl[e]("gesturechange",n,a.onGestureChange,i),t.$wrapperEl[e]("gestureend",n,a.onGestureEnd,i)},enableGestures:function(){this.zoom.gesturesEnabled||(this.zoom.gesturesEnabled=!0,this.zoom.toggleGestures("on"))},disableGestures:function(){this.zoom.gesturesEnabled&&(this.zoom.gesturesEnabled=!1,this.zoom.toggleGestures("off"))},enable:function(){var e=this,t=e.support,a=e.zoom;if(!a.enabled){a.enabled=!0;var n=!("touchstart"!==e.touchEvents.start||!t.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},i=!t.passiveListener||{passive:!1,capture:!0},r="."+e.params.slideClass;e.zoom.passiveListener=n,e.zoom.slideSelector=r,t.gestures?(e.$wrapperEl.on(e.touchEvents.start,e.zoom.enableGestures,n),e.$wrapperEl.on(e.touchEvents.end,e.zoom.disableGestures,n)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,r,a.onGestureStart,n),e.$wrapperEl.on(e.touchEvents.move,r,a.onGestureChange,i),e.$wrapperEl.on(e.touchEvents.end,r,a.onGestureEnd,n),e.touchEvents.cancel&&e.$wrapperEl.on(e.touchEvents.cancel,r,a.onGestureEnd,n)),e.$wrapperEl.on(e.touchEvents.move,"."+e.params.zoom.containerClass,a.onTouchMove,i)}},disable:function(){var e=this,t=e.zoom;if(t.enabled){var a=e.support;e.zoom.enabled=!1;var n=!("touchstart"!==e.touchEvents.start||!a.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},i=!a.passiveListener||{passive:!1,capture:!0},r="."+e.params.slideClass;a.gestures?(e.$wrapperEl.off(e.touchEvents.start,e.zoom.enableGestures,n),e.$wrapperEl.off(e.touchEvents.end,e.zoom.disableGestures,n)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,r,t.onGestureStart,n),e.$wrapperEl.off(e.touchEvents.move,r,t.onGestureChange,i),e.$wrapperEl.off(e.touchEvents.end,r,t.onGestureEnd,n),e.touchEvents.cancel&&e.$wrapperEl.off(e.touchEvents.cancel,r,t.onGestureEnd,n)),e.$wrapperEl.off(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove,i)}}},te={loadInSlide:function(e,t){void 0===t&&(t=!0);var a=this,n=a.params.lazy;if(void 0!==e&&0!==a.slides.length){var i=a.virtual&&a.params.virtual.enabled?a.$wrapperEl.children("."+a.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):a.slides.eq(e),r=i.find("."+n.elementClass+":not(."+n.loadedClass+"):not(."+n.loadingClass+")");!i.hasClass(n.elementClass)||i.hasClass(n.loadedClass)||i.hasClass(n.loadingClass)||r.push(i[0]),0!==r.length&&r.each((function(e){var r=m(e);r.addClass(n.loadingClass);var s=r.attr("data-background"),o=r.attr("data-src"),l=r.attr("data-srcset"),d=r.attr("data-sizes"),c=r.parent("picture");a.loadImage(r[0],o||s,l,d,!1,(function(){if(null!=a&&a&&(!a||a.params)&&!a.destroyed){if(s?(r.css("background-image",'url("'+s+'")'),r.removeAttr("data-background")):(l&&(r.attr("srcset",l),r.removeAttr("data-srcset")),d&&(r.attr("sizes",d),r.removeAttr("data-sizes")),c.length&&c.children("source").each((function(e){var t=m(e);t.attr("data-srcset")&&(t.attr("srcset",t.attr("data-srcset")),t.removeAttr("data-srcset"))})),o&&(r.attr("src",o),r.removeAttr("data-src"))),r.addClass(n.loadedClass).removeClass(n.loadingClass),i.find("."+n.preloaderClass).remove(),a.params.loop&&t){var e=i.attr("data-swiper-slide-index");if(i.hasClass(a.params.slideDuplicateClass)){var u=a.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+a.params.slideDuplicateClass+")");a.lazy.loadInSlide(u.index(),!1)}else{var p=a.$wrapperEl.children("."+a.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');a.lazy.loadInSlide(p.index(),!1)}}a.emit("lazyImageReady",i[0],r[0]),a.params.autoHeight&&a.updateAutoHeight()}})),a.emit("lazyImageLoad",i[0],r[0])}))}},load:function(){var e=this,t=e.$wrapperEl,a=e.params,n=e.slides,i=e.activeIndex,r=e.virtual&&a.virtual.enabled,s=a.lazy,o=a.slidesPerView;function l(e){if(r){if(t.children("."+a.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return!0}else if(n[e])return!0;return!1}function d(e){return r?m(e).attr("data-swiper-slide-index"):m(e).index()}if("auto"===o&&(o=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children("."+a.slideVisibleClass).each((function(t){var a=r?m(t).attr("data-swiper-slide-index"):m(t).index();e.lazy.loadInSlide(a)}));else if(o>1)for(var c=i;c<i+o;c+=1)l(c)&&e.lazy.loadInSlide(c);else e.lazy.loadInSlide(i);if(s.loadPrevNext)if(o>1||s.loadPrevNextAmount&&s.loadPrevNextAmount>1){for(var u=s.loadPrevNextAmount,p=o,f=Math.min(i+p+Math.max(u,p),n.length),h=Math.max(i-Math.max(p,u),0),v=i+o;v<f;v+=1)l(v)&&e.lazy.loadInSlide(v);for(var g=h;g<i;g+=1)l(g)&&e.lazy.loadInSlide(g)}else{var y=t.children("."+a.slideNextClass);y.length>0&&e.lazy.loadInSlide(d(y));var b=t.children("."+a.slidePrevClass);b.length>0&&e.lazy.loadInSlide(d(b))}},checkInViewOnLoad:function(){var e=o(),t=this;if(t&&!t.destroyed){var a=t.params.lazy.scrollingElement?m(t.params.lazy.scrollingElement):m(e),n=a[0]===e,i=n?e.innerWidth:a[0].offsetWidth,r=n?e.innerHeight:a[0].offsetHeight,s=t.$el.offset(),l=!1;t.rtlTranslate&&(s.left-=t.$el[0].scrollLeft);for(var d=[[s.left,s.top],[s.left+t.width,s.top],[s.left,s.top+t.height],[s.left+t.width,s.top+t.height]],c=0;c<d.length;c+=1){var u=d[c];if(u[0]>=0&&u[0]<=i&&u[1]>=0&&u[1]<=r){if(0===u[0]&&0===u[1])continue;l=!0}}l?(t.lazy.load(),a.off("scroll",t.lazy.checkInViewOnLoad)):t.lazy.scrollHandlerAttached||(t.lazy.scrollHandlerAttached=!0,a.on("scroll",t.lazy.checkInViewOnLoad))}}},ae={LinearSpline:function(e,t){var a,n,i,r,s;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(s=function(e,t){for(n=-1,a=e.length;a-n>1;)e[i=a+n>>1]<=t?n=i:a=i;return a}(this.x,e),r=s-1,(e-this.x[r])*(this.y[s]-this.y[r])/(this.x[s]-this.x[r])+this.y[r]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new ae.LinearSpline(t.slidesGrid,e.slidesGrid):new ae.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var a,n,i=this,r=i.controller.control,s=i.constructor;function o(e){var t=i.rtlTranslate?-i.translate:i.translate;"slide"===i.params.controller.by&&(i.controller.getInterpolateFunction(e),n=-i.controller.spline.interpolate(-t)),n&&"container"!==i.params.controller.by||(a=(e.maxTranslate()-e.minTranslate())/(i.maxTranslate()-i.minTranslate()),n=(t-i.minTranslate())*a+e.minTranslate()),i.params.controller.inverse&&(n=e.maxTranslate()-n),e.updateProgress(n),e.setTranslate(n,i),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(r))for(var l=0;l<r.length;l+=1)r[l]!==t&&r[l]instanceof s&&o(r[l]);else r instanceof s&&t!==r&&o(r)},setTransition:function(e,t){var a,n=this,i=n.constructor,r=n.controller.control;function s(t){t.setTransition(e,n),0!==e&&(t.transitionStart(),t.params.autoHeight&&E((function(){t.updateAutoHeight()})),t.$wrapperEl.transitionEnd((function(){r&&(t.params.loop&&"slide"===n.params.controller.by&&t.loopFix(),t.transitionEnd())})))}if(Array.isArray(r))for(a=0;a<r.length;a+=1)r[a]!==t&&r[a]instanceof i&&s(r[a]);else r instanceof i&&t!==r&&s(r)}},ne={getRandomNumber:function(e){return void 0===e&&(e=16),"x".repeat(e).replace(/x/g,(function(){return Math.round(16*Math.random()).toString(16)}))},makeElFocusable:function(e){return e.attr("tabIndex","0"),e},makeElNotFocusable:function(e){return e.attr("tabIndex","-1"),e},addElRole:function(e,t){return e.attr("role",t),e},addElRoleDescription:function(e,t){return e.attr("aria-role-description",t),e},addElControls:function(e,t){return e.attr("aria-controls",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},addElId:function(e,t){return e.attr("id",t),e},addElLive:function(e,t){return e.attr("aria-live",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this,a=t.params.a11y;if(13===e.keyCode){var n=m(e.target);t.navigation&&t.navigation.$nextEl&&n.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(a.lastSlideMessage):t.a11y.notify(a.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&n.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(a.firstSlideMessage):t.a11y.notify(a.prevSlideMessage)),t.pagination&&n.is("."+t.params.pagination.bulletClass.replace(/ /g,"."))&&n[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e=this;if(!e.params.loop&&e.navigation){var t=e.navigation,a=t.$nextEl,n=t.$prevEl;n&&n.length>0&&(e.isBeginning?(e.a11y.disableEl(n),e.a11y.makeElNotFocusable(n)):(e.a11y.enableEl(n),e.a11y.makeElFocusable(n))),a&&a.length>0&&(e.isEnd?(e.a11y.disableEl(a),e.a11y.makeElNotFocusable(a)):(e.a11y.enableEl(a),e.a11y.makeElFocusable(a)))}},updatePagination:function(){var e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((function(a){var n=m(a);e.a11y.makeElFocusable(n),e.params.pagination.renderBullet||(e.a11y.addElRole(n,"button"),e.a11y.addElLabel(n,t.paginationBulletMessage.replace(/\{\{index\}\}/,n.index()+1)))}))},init:function(){var e=this,t=e.params.a11y;e.$el.append(e.a11y.liveRegion);var a=e.$el;t.containerRoleDescriptionMessage&&e.a11y.addElRoleDescription(a,t.containerRoleDescriptionMessage),t.containerMessage&&e.a11y.addElLabel(a,t.containerMessage);var n,i,r,s=e.$wrapperEl,o=s.attr("id")||"swiper-wrapper-"+e.a11y.getRandomNumber(16);e.a11y.addElId(s,o),n=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite",e.a11y.addElLive(s,n),t.itemRoleDescriptionMessage&&e.a11y.addElRoleDescription(m(e.slides),t.itemRoleDescriptionMessage),e.a11y.addElRole(m(e.slides),"group"),e.slides.each((function(t){var a=m(t);e.a11y.addElLabel(a,a.index()+1+" / "+e.slides.length)})),e.navigation&&e.navigation.$nextEl&&(i=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(r=e.navigation.$prevEl),i&&i.length&&(e.a11y.makeElFocusable(i),"BUTTON"!==i[0].tagName&&(e.a11y.addElRole(i,"button"),i.on("keydown",e.a11y.onEnterKey)),e.a11y.addElLabel(i,t.nextSlideMessage),e.a11y.addElControls(i,o)),r&&r.length&&(e.a11y.makeElFocusable(r),"BUTTON"!==r[0].tagName&&(e.a11y.addElRole(r,"button"),r.on("keydown",e.a11y.onEnterKey)),e.a11y.addElLabel(r,t.prevSlideMessage),e.a11y.addElControls(r,o)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass.replace(/ /g,"."),e.a11y.onEnterKey)},destroy:function(){var e,t,a=this;a.a11y.liveRegion&&a.a11y.liveRegion.length>0&&a.a11y.liveRegion.remove(),a.navigation&&a.navigation.$nextEl&&(e=a.navigation.$nextEl),a.navigation&&a.navigation.$prevEl&&(t=a.navigation.$prevEl),e&&e.off("keydown",a.a11y.onEnterKey),t&&t.off("keydown",a.a11y.onEnterKey),a.pagination&&a.params.pagination.clickable&&a.pagination.bullets&&a.pagination.bullets.length&&a.pagination.$el.off("keydown","."+a.params.pagination.bulletClass.replace(/ /g,"."),a.a11y.onEnterKey)}},ie={init:function(){var e=this,t=o();if(e.params.history){if(!t.history||!t.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var a=e.history;a.initialized=!0,a.paths=ie.getPathValues(e.params.url),(a.paths.key||a.paths.value)&&(a.scrollToSlide(0,a.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||t.addEventListener("popstate",e.history.setHistoryPopState))}},destroy:function(){var e=o();this.params.history.replaceState||e.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){var e=this;e.history.paths=ie.getPathValues(e.params.url),e.history.scrollToSlide(e.params.speed,e.history.paths.value,!1)},getPathValues:function(e){var t=o(),a=(e?new URL(e):t.location).pathname.slice(1).split("/").filter((function(e){return""!==e})),n=a.length;return{key:a[n-2],value:a[n-1]}},setHistory:function(e,t){var a=this,n=o();if(a.history.initialized&&a.params.history.enabled){var i;i=a.params.url?new URL(a.params.url):n.location;var r=a.slides.eq(t),s=ie.slugify(r.attr("data-history"));i.pathname.includes(e)||(s=e+"/"+s);var l=n.history.state;l&&l.value===s||(a.params.history.replaceState?n.history.replaceState({value:s},null,s):n.history.pushState({value:s},null,s))}},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,a){var n=this;if(t)for(var i=0,r=n.slides.length;i<r;i+=1){var s=n.slides.eq(i);if(ie.slugify(s.attr("data-history"))===t&&!s.hasClass(n.params.slideDuplicateClass)){var o=s.index();n.slideTo(o,e,a)}}else n.slideTo(0,e,a)}},re={onHashCange:function(){var e=this,t=r();e.emit("hashChange");var a=t.location.hash.replace("#","");if(a!==e.slides.eq(e.activeIndex).attr("data-hash")){var n=e.$wrapperEl.children("."+e.params.slideClass+'[data-hash="'+a+'"]').index();if(void 0===n)return;e.slideTo(n)}},setHash:function(){var e=this,t=o(),a=r();if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&t.history&&t.history.replaceState)t.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||""),e.emit("hashSet");else{var n=e.slides.eq(e.activeIndex),i=n.attr("data-hash")||n.attr("data-history");a.location.hash=i||"",e.emit("hashSet")}},init:function(){var e=this,t=r(),a=o();if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var n=t.location.hash.replace("#","");if(n)for(var i=0,s=e.slides.length;i<s;i+=1){var l=e.slides.eq(i);if((l.attr("data-hash")||l.attr("data-history"))===n&&!l.hasClass(e.params.slideDuplicateClass)){var d=l.index();e.slideTo(d,0,e.params.runCallbacksOnInit,!0)}}e.params.hashNavigation.watchState&&m(a).on("hashchange",e.hashNavigation.onHashCange)}},destroy:function(){var e=o();this.params.hashNavigation.watchState&&m(e).off("hashchange",this.hashNavigation.onHashCange)}},se={run:function(){var e=this,t=e.slides.eq(e.activeIndex),a=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(a=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=E((function(){var t;e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),t=e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(t=e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),t=e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(t=e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),(e.params.cssMode&&e.autoplay.running||!1===t)&&e.autoplay.run()}),a)},start:function(){var e=this;return void 0===e.autoplay.timeout&&!e.autoplay.running&&(e.autoplay.running=!0,e.emit("autoplayStart"),e.autoplay.run(),!0)},stop:function(){var e=this;return!!e.autoplay.running&&void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0)},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))},onVisibilityChange:function(){var e=this,t=r();"hidden"===t.visibilityState&&e.autoplay.running&&e.autoplay.pause(),"visible"===t.visibilityState&&e.autoplay.paused&&(e.autoplay.run(),e.autoplay.paused=!1)},onTransitionEnd:function(e){var t=this;t&&!t.destroyed&&t.$wrapperEl&&e.target===t.$wrapperEl[0]&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}},oe={setTranslate:function(){for(var e=this,t=e.slides,a=0;a<t.length;a+=1){var n=e.slides.eq(a),i=-n[0].swiperSlideOffset;e.params.virtualTranslate||(i-=e.translate);var r=0;e.isHorizontal()||(r=i,i=0);var s=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(n[0].progress),0):1+Math.min(Math.max(n[0].progress,-1),0);n.css({opacity:s}).transform("translate3d("+i+"px, "+r+"px, 0px)")}},setTransition:function(e){var t=this,a=t.slides,n=t.$wrapperEl;if(a.transition(e),t.params.virtualTranslate&&0!==e){var i=!1;a.transitionEnd((function(){if(!i&&t&&!t.destroyed){i=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],a=0;a<e.length;a+=1)n.trigger(e[a])}}))}}},le={setTranslate:function(){var e,t=this,a=t.$el,n=t.$wrapperEl,i=t.slides,r=t.width,s=t.height,o=t.rtlTranslate,l=t.size,d=t.browser,c=t.params.cubeEffect,u=t.isHorizontal(),p=t.virtual&&t.params.virtual.enabled,f=0;c.shadow&&(u?(0===(e=n.find(".swiper-cube-shadow")).length&&(e=m('<div class="swiper-cube-shadow"></div>'),n.append(e)),e.css({height:r+"px"})):0===(e=a.find(".swiper-cube-shadow")).length&&(e=m('<div class="swiper-cube-shadow"></div>'),a.append(e)));for(var h=0;h<i.length;h+=1){var v=i.eq(h),g=h;p&&(g=parseInt(v.attr("data-swiper-slide-index"),10));var y=90*g,b=Math.floor(y/360);o&&(y=-y,b=Math.floor(-y/360));var w=Math.max(Math.min(v[0].progress,1),-1),E=0,S=0,x=0;g%4==0?(E=4*-b*l,x=0):(g-1)%4==0?(E=0,x=4*-b*l):(g-2)%4==0?(E=l+4*b*l,x=l):(g-3)%4==0&&(E=-l,x=3*l+4*l*b),o&&(E=-E),u||(S=E,E=0);var T="rotateX("+(u?0:-y)+"deg) rotateY("+(u?y:0)+"deg) translate3d("+E+"px, "+S+"px, "+x+"px)";if(w<=1&&w>-1&&(f=90*g+90*w,o&&(f=90*-g-90*w)),v.transform(T),c.slideShadows){var C=u?v.find(".swiper-slide-shadow-left"):v.find(".swiper-slide-shadow-top"),M=u?v.find(".swiper-slide-shadow-right"):v.find(".swiper-slide-shadow-bottom");0===C.length&&(C=m('<div class="swiper-slide-shadow-'+(u?"left":"top")+'"></div>'),v.append(C)),0===M.length&&(M=m('<div class="swiper-slide-shadow-'+(u?"right":"bottom")+'"></div>'),v.append(M)),C.length&&(C[0].style.opacity=Math.max(-w,0)),M.length&&(M[0].style.opacity=Math.max(w,0))}}if(n.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),c.shadow)if(u)e.transform("translate3d(0px, "+(r/2+c.shadowOffset)+"px, "+-r/2+"px) rotateX(90deg) rotateZ(0deg) scale("+c.shadowScale+")");else{var L=Math.abs(f)-90*Math.floor(Math.abs(f)/90),k=1.5-(Math.sin(2*L*Math.PI/360)/2+Math.cos(2*L*Math.PI/360)/2),z=c.shadowScale,P=c.shadowScale/k,A=c.shadowOffset;e.transform("scale3d("+z+", 1, "+P+") translate3d(0px, "+(s/2+A)+"px, "+-s/2/P+"px) rotateX(-90deg)")}var I=d.isSafari||d.isWebView?-l/2:0;n.transform("translate3d(0px,0,"+I+"px) rotateX("+(t.isHorizontal()?0:f)+"deg) rotateY("+(t.isHorizontal()?-f:0)+"deg)")},setTransition:function(e){var t=this,a=t.$el;t.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.cubeEffect.shadow&&!t.isHorizontal()&&a.find(".swiper-cube-shadow").transition(e)}},de={setTranslate:function(){for(var e=this,t=e.slides,a=e.rtlTranslate,n=0;n<t.length;n+=1){var i=t.eq(n),r=i[0].progress;e.params.flipEffect.limitRotation&&(r=Math.max(Math.min(i[0].progress,1),-1));var s=-180*r,o=0,l=-i[0].swiperSlideOffset,d=0;if(e.isHorizontal()?a&&(s=-s):(d=l,l=0,o=-s,s=0),i[0].style.zIndex=-Math.abs(Math.round(r))+t.length,e.params.flipEffect.slideShadows){var c=e.isHorizontal()?i.find(".swiper-slide-shadow-left"):i.find(".swiper-slide-shadow-top"),u=e.isHorizontal()?i.find(".swiper-slide-shadow-right"):i.find(".swiper-slide-shadow-bottom");0===c.length&&(c=m('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"left":"top")+'"></div>'),i.append(c)),0===u.length&&(u=m('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"right":"bottom")+'"></div>'),i.append(u)),c.length&&(c[0].style.opacity=Math.max(-r,0)),u.length&&(u[0].style.opacity=Math.max(r,0))}i.transform("translate3d("+l+"px, "+d+"px, 0px) rotateX("+o+"deg) rotateY("+s+"deg)")}},setTransition:function(e){var t=this,a=t.slides,n=t.activeIndex,i=t.$wrapperEl;if(a.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){var r=!1;a.eq(n).transitionEnd((function(){if(!r&&t&&!t.destroyed){r=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],a=0;a<e.length;a+=1)i.trigger(e[a])}}))}}},ce={setTranslate:function(){for(var e=this,t=e.width,a=e.height,n=e.slides,i=e.slidesSizesGrid,r=e.params.coverflowEffect,s=e.isHorizontal(),o=e.translate,l=s?t/2-o:a/2-o,d=s?r.rotate:-r.rotate,c=r.depth,u=0,p=n.length;u<p;u+=1){var f=n.eq(u),h=i[u],v=(l-f[0].swiperSlideOffset-h/2)/h*r.modifier,g=s?d*v:0,y=s?0:d*v,b=-c*Math.abs(v),w=r.stretch;"string"==typeof w&&-1!==w.indexOf("%")&&(w=parseFloat(r.stretch)/100*h);var E=s?0:w*v,S=s?w*v:0,x=1-(1-r.scale)*Math.abs(v);Math.abs(S)<.001&&(S=0),Math.abs(E)<.001&&(E=0),Math.abs(b)<.001&&(b=0),Math.abs(g)<.001&&(g=0),Math.abs(y)<.001&&(y=0),Math.abs(x)<.001&&(x=0);var T="translate3d("+S+"px,"+E+"px,"+b+"px)  rotateX("+y+"deg) rotateY("+g+"deg) scale("+x+")";if(f.transform(T),f[0].style.zIndex=1-Math.abs(Math.round(v)),r.slideShadows){var C=s?f.find(".swiper-slide-shadow-left"):f.find(".swiper-slide-shadow-top"),M=s?f.find(".swiper-slide-shadow-right"):f.find(".swiper-slide-shadow-bottom");0===C.length&&(C=m('<div class="swiper-slide-shadow-'+(s?"left":"top")+'"></div>'),f.append(C)),0===M.length&&(M=m('<div class="swiper-slide-shadow-'+(s?"right":"bottom")+'"></div>'),f.append(M)),C.length&&(C[0].style.opacity=v>0?v:0),M.length&&(M[0].style.opacity=-v>0?-v:0)}}},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},ue={init:function(){var e=this,t=e.params.thumbs;if(e.thumbs.initialized)return!1;e.thumbs.initialized=!0;var a=e.constructor;return t.swiper instanceof a?(e.thumbs.swiper=t.swiper,C(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),C(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):T(t.swiper)&&(e.thumbs.swiper=new a(C({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick),!0},onThumbClick:function(){var e=this,t=e.thumbs.swiper;if(t){var a=t.clickedIndex,n=t.clickedSlide;if(!(n&&m(n).hasClass(e.params.thumbs.slideThumbActiveClass)||null==a)){var i;if(i=t.params.loop?parseInt(m(t.clickedSlide).attr("data-swiper-slide-index"),10):a,e.params.loop){var r=e.activeIndex;e.slides.eq(r).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,r=e.activeIndex);var s=e.slides.eq(r).prevAll('[data-swiper-slide-index="'+i+'"]').eq(0).index(),o=e.slides.eq(r).nextAll('[data-swiper-slide-index="'+i+'"]').eq(0).index();i=void 0===s?o:void 0===o?s:o-r<r-s?o:s}e.slideTo(i)}}},update:function(e){var t=this,a=t.thumbs.swiper;if(a){var n="auto"===a.params.slidesPerView?a.slidesPerViewDynamic():a.params.slidesPerView,i=t.params.thumbs.autoScrollOffset,r=i&&!a.params.loop;if(t.realIndex!==a.realIndex||r){var s,o,l=a.activeIndex;if(a.params.loop){a.slides.eq(l).hasClass(a.params.slideDuplicateClass)&&(a.loopFix(),a._clientLeft=a.$wrapperEl[0].clientLeft,l=a.activeIndex);var d=a.slides.eq(l).prevAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),c=a.slides.eq(l).nextAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index();s=void 0===d?c:void 0===c?d:c-l==l-d?l:c-l<l-d?c:d,o=t.activeIndex>t.previousIndex?"next":"prev"}else o=(s=t.realIndex)>t.previousIndex?"next":"prev";r&&(s+="next"===o?i:-1*i),a.visibleSlidesIndexes&&a.visibleSlidesIndexes.indexOf(s)<0&&(a.params.centeredSlides?s=s>l?s-Math.floor(n/2)+1:s+Math.floor(n/2)-1:s>l&&(s=s-n+1),a.slideTo(s,e?0:void 0))}var u=1,p=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(u=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(u=1),u=Math.floor(u),a.slides.removeClass(p),a.params.loop||a.params.virtual&&a.params.virtual.enabled)for(var f=0;f<u;f+=1)a.$wrapperEl.children('[data-swiper-slide-index="'+(t.realIndex+f)+'"]').addClass(p);else for(var h=0;h<u;h+=1)a.slides.eq(t.realIndex+h).addClass(p)}}},pe=[q,W,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}},create:function(){M(this,{mousewheel:{enabled:!1,lastScrollTime:S(),lastEventBeforeSnap:void 0,recentWheelEvents:[],enable:U.enable,disable:U.disable,handle:U.handle,handleMouseEnter:U.handleMouseEnter,handleMouseLeave:U.handleMouseLeave,animateSlider:U.animateSlider,releaseScroll:U.releaseScroll}})},on:{init:function(e){!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy:function(e){e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){M(this,{navigation:t({},K)})},on:{init:function(e){e.navigation.init(),e.navigation.update()},toEdge:function(e){e.navigation.update()},fromEdge:function(e){e.navigation.update()},destroy:function(e){e.navigation.destroy()},click:function(e,t){var a,n=e.navigation,i=n.$nextEl,r=n.$prevEl;!e.params.navigation.hideOnClick||m(t.target).is(r)||m(t.target).is(i)||(i?a=i.hasClass(e.params.navigation.hiddenClass):r&&(a=r.hasClass(e.params.navigation.hiddenClass)),!0===a?e.emit("navigationShow"):e.emit("navigationHide"),i&&i.toggleClass(e.params.navigation.hiddenClass),r&&r.toggleClass(e.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){M(this,{pagination:t({dynamicBulletIndex:0},Q)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},click:function(e,t){e.params.pagination.el&&e.params.pagination.hideOnClick&&e.pagination.$el.length>0&&!m(t.target).hasClass(e.params.pagination.bulletClass)&&(!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit("paginationShow"):e.emit("paginationHide"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){M(this,{scrollbar:t({isTouched:!1,timeout:null,dragTimeout:null},Z)})},on:{init:function(e){e.scrollbar.init(),e.scrollbar.updateSize(),e.scrollbar.setTranslate()},update:function(e){e.scrollbar.updateSize()},resize:function(e){e.scrollbar.updateSize()},observerUpdate:function(e){e.scrollbar.updateSize()},setTranslate:function(e){e.scrollbar.setTranslate()},setTransition:function(e,t){e.scrollbar.setTransition(t)},destroy:function(e){e.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){M(this,{parallax:t({},J)})},on:{beforeInit:function(e){e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},init:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTranslate:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTransition:function(e,t){e.params.parallax.enabled&&e.parallax.setTransition(t)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var e=this;M(e,{zoom:t({enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}},ee)});var a=1;Object.defineProperty(e.zoom,"scale",{get:function(){return a},set:function(t){if(a!==t){var n=e.zoom.gesture.$imageEl?e.zoom.gesture.$imageEl[0]:void 0,i=e.zoom.gesture.$slideEl?e.zoom.gesture.$slideEl[0]:void 0;e.emit("zoomChange",t,n,i)}a=t}})},on:{init:function(e){e.params.zoom.enabled&&e.zoom.enable()},destroy:function(e){e.zoom.disable()},touchStart:function(e,t){e.zoom.enabled&&e.zoom.onTouchStart(t)},touchEnd:function(e,t){e.zoom.enabled&&e.zoom.onTouchEnd(t)},doubleTap:function(e,t){e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&e.zoom.toggle(t)},transitionEnd:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{checkInView:!1,enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,scrollingElement:"",elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){M(this,{lazy:t({initialImageLoaded:!1},te)})},on:{beforeInit:function(e){e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init:function(e){e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&(e.params.lazy.checkInView?e.lazy.checkInViewOnLoad():e.lazy.load())},scroll:function(e){e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize:function(e){e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove:function(e){e.params.lazy.enabled&&e.lazy.load()},transitionStart:function(e){e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(e){e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange:function(e){e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){M(this,{controller:t({control:this.params.controller.control},ae)})},on:{update:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate:function(e,t,a){e.controller.control&&e.controller.setTranslate(t,a)},setTransition:function(e,t,a){e.controller.control&&e.controller.setTransition(t,a)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null}},create:function(){M(this,{a11y:t({},ne,{liveRegion:m('<span class="'+this.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')})})},on:{afterInit:function(e){e.params.a11y.enabled&&(e.a11y.init(),e.a11y.updateNavigation())},toEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},fromEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},paginationUpdate:function(e){e.params.a11y.enabled&&e.a11y.updatePagination()},destroy:function(e){e.params.a11y.enabled&&e.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){M(this,{history:t({},ie)})},on:{init:function(e){e.params.history.enabled&&e.history.init()},destroy:function(e){e.params.history.enabled&&e.history.destroy()},transitionEnd:function(e){e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange:function(e){e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){M(this,{hashNavigation:t({initialized:!1},re)})},on:{init:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd:function(e){e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange:function(e){e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){M(this,{autoplay:t({},se,{running:!1,paused:!1})})},on:{init:function(e){e.params.autoplay.enabled&&(e.autoplay.start(),r().addEventListener("visibilitychange",e.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t,a){e.autoplay.running&&(a||!e.params.autoplay.disableOnInteraction?e.autoplay.pause(t):e.autoplay.stop())},sliderFirstMove:function(e){e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd:function(e){e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy:function(e){e.autoplay.running&&e.autoplay.stop(),r().removeEventListener("visibilitychange",e.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){M(this,{fadeEffect:t({},oe)})},on:{beforeInit:function(e){if("fade"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"fade");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){"fade"===e.params.effect&&e.fadeEffect.setTranslate()},setTransition:function(e,t){"fade"===e.params.effect&&e.fadeEffect.setTransition(t)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){M(this,{cubeEffect:t({},le)})},on:{beforeInit:function(e){if("cube"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"cube"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){"cube"===e.params.effect&&e.cubeEffect.setTranslate()},setTransition:function(e,t){"cube"===e.params.effect&&e.cubeEffect.setTransition(t)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){M(this,{flipEffect:t({},de)})},on:{beforeInit:function(e){if("flip"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"flip"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){"flip"===e.params.effect&&e.flipEffect.setTranslate()},setTransition:function(e,t){"flip"===e.params.effect&&e.flipEffect.setTransition(t)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create:function(){M(this,{coverflowEffect:t({},ce)})},on:{beforeInit:function(e){"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(e){"coverflow"===e.params.effect&&e.coverflowEffect.setTranslate()},setTransition:function(e,t){"coverflow"===e.params.effect&&e.coverflowEffect.setTransition(t)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){M(this,{thumbs:t({swiper:null,initialized:!1},ue)})},on:{beforeInit:function(e){var t=e.params.thumbs;t&&t.swiper&&(e.thumbs.init(),e.thumbs.update(!0))},slideChange:function(e){e.thumbs.swiper&&e.thumbs.update()},update:function(e){e.thumbs.swiper&&e.thumbs.update()},resize:function(e){e.thumbs.swiper&&e.thumbs.update()},observerUpdate:function(e){e.thumbs.swiper&&e.thumbs.update()},setTransition:function(e,t){var a=e.thumbs.swiper;a&&a.setTransition(t)},beforeDestroy:function(e){var t=e.thumbs.swiper;t&&e.thumbs.swiperCreated&&t&&t.destroy()}}}];return X.use(pe),X})),document.onreadystatechange=function(){if("interactive"===document.readyState&&document.documentElement.clientWidth<=700){document.querySelector(".menu__desktop-contacts").insertAdjacentElement("beforeend",document.querySelector(".who__socials")),document.querySelector(".menu__desktop-contacts").insertAdjacentElement("beforeend",document.querySelector(".header__contact--phone")),document.querySelector(".menu__desktop").insertAdjacentElement("beforeend",document.querySelector(".header__contact--mail")),document.querySelector("body").insertAdjacentElement("afterbegin",document.querySelector(".who__avatar-icon"));var e,t=_createForOfIteratorHelper(document.querySelectorAll(".who__achieving"));try{for(t.s();!(e=t.n()).done;){var a=e.value;document.querySelector(".about").insertAdjacentElement("afterend",a),a.classList.add("who__achieving--visible")}}catch(e){t.e(e)}finally{t.f()}}},window.addEventListener("load",(function(){var e=document.querySelector(".cursor"),t=document.querySelector(".menu__burger"),a=document.querySelector(".menu"),n=document.querySelector(".about__text"),i=document.querySelectorAll(".menu__desktop-element"),r=document.querySelector(".header__button"),s=document.querySelector(".who__avatar-icon");function o(){return"ontouchstart"in window||navigator.maxTouchPoints}if(!o()){window.addEventListener("mousemove",(function(t){e.style.top=t.pageY+"px",e.style.left=t.pageX+"px"})),document.querySelector("body").addEventListener("mouseleave",(function(){e.classList.add("cursor--leave")})),document.querySelector("body").addEventListener("mouseenter",(function(){e.classList.remove("cursor--leave")})),document.querySelector("body").addEventListener("mousedown",(function(){e.classList.add("cursor--click")})),document.querySelector("body").addEventListener("mouseup",(function(){e.classList.remove("cursor--click")}));var l,d=_createForOfIteratorHelper(document.querySelectorAll("a"));try{for(d.s();!(l=d.n()).done;){var c=l.value;"who__social"!==c.className&&c.addEventListener("mouseenter",(function(t){e.classList.add("cursor--pointer")}))}}catch(e){d.e(e)}finally{d.f()}var u,p=_createForOfIteratorHelper(document.querySelectorAll("a"));try{for(p.s();!(u=p.n()).done;){u.value.addEventListener("mouseleave",(function(t){e.classList.remove("cursor--pointer")}))}}catch(e){p.e(e)}finally{p.f()}var f,h=_createForOfIteratorHelper(document.querySelectorAll("button"));try{for(h.s();!(f=h.n()).done;){f.value.addEventListener("mouseenter",(function(t){e.classList.add("cursor--pointer")}))}}catch(e){h.e(e)}finally{h.f()}var v,m=_createForOfIteratorHelper(document.querySelectorAll("button"));try{for(m.s();!(v=m.n()).done;){v.value.addEventListener("mouseleave",(function(t){e.classList.remove("cursor--pointer")}))}}catch(e){m.e(e)}finally{m.f()}}t.addEventListener("click",(function(){a.classList.toggle("menu--open"),setTimeout((function(){var e,t=_createForOfIteratorHelper(i);try{for(t.s();!(e=t.n()).done;){e.value.classList.toggle("menu__desktop-element--wrap")}}catch(e){t.e(e)}finally{t.f()}}),1500),document.documentElement.clientWidth<=700&&(document.querySelector("body").classList.toggle("block"),r.classList.toggle("header__button--white"),s.classList.toggle("who__avatar-icon--disable"))})),document.documentElement.clientWidth>700&&new fullpage("#fullpage",{autoScrolling:!0,scrollHorizontally:!0,onLeave:function(e,t,a){document.querySelector('.pagination__number[data-number="'.concat(e.index+1,'"]')).classList.remove("pagination__number--active"),document.querySelector('.pagination__number[data-number="'.concat(t.index+1,'"]')).classList.add("pagination__number--active")}}),o()?e.classList.add("cursor--disable"):document.querySelector("body").classList.add("mouse-device"),new TypeIt(".about__text",{speed:75,waitUntilVisible:!0}).type(n.dataset.textStringOne).break({delay:200}).type(n.dataset.textStringTwo).break({delay:200}).type('<span class="about__text-white">'.concat(n.dataset.textStringThree,"</span>")).type(n.dataset.textStringFour).type('<span class="about__text-white">'.concat(n.dataset.textStringFive,"</span>")).break({delay:200}).type('<span class="about__text-white">'.concat(n.dataset.textStringSix,"</span>")).type(n.dataset.textStringSeven).type('<span class="about__text-white">'.concat(n.dataset.textStringEight,"</span>")).go()}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
